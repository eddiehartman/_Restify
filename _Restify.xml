<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig IDIversion="Created by SDI7.2 - 2024-06-26" created="Sun Nov 17 15:16:51 CET 2024" createdBy="eddiehartman" modified="Sat Dec 07 20:22:28 CET 2024" modifiedBy="eddiehartman" version="7.1.1">
    <Folder name="AssemblyLines">
        <AssemblyLine name="Reading schema">
            <ModTime>1733570226377</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="RestifyLib" state="Enabled"/>
                    <Component name="SCHEMA class" state="Enabled"/>
                    <Component name="ENDPOINTS class" state="Enabled"/>
                    <Component name="Oauth stuff" state="Enabled"/>
                    <Component name="Test" state="Enabled"/>
                    <Component name="ScriptConnector" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1733570226377</ModTime>
                <Script name="RestifyLib">
                    <InheritFrom>/Scripts/RESTIFY library class</InheritFrom>
                    <ModTime>1732710775141</ModTime>
                </Script>
                <Script name="SCHEMA class">
                    <InheritFrom>/Scripts/SCHEMA class</InheritFrom>
                    <ModTime>1733321188957</ModTime>
                </Script>
                <Script name="ENDPOINTS class">
                    <InheritFrom>/Scripts/ENDPOINTS class</InheritFrom>
                    <ModTime>1733321188957</ModTime>
                </Script>
                <Script name="Oauth stuff">
                    <ModTime>1733321219267</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[var OAUTH = null; // Will be instantiated below

// OAUTH is an object (as all js functions are) and is instantiated using this function (another object).
function OAuth2(params) {
	//
	// -- Token this.request parameters
	//
	this.params = params;
	this.debug = params.debug || false;
	this.url = params.url || "* url not specified *";

	//
	// -- Returns form-urlencoded string of an object
	//
	this.urlEncode = function(obj) {
		var arr = [];
		for (var f in obj) {
			arr.push(f + "=" + obj[f]);
		}
		return arr.join("&");
	}

	// 
	// -- Returns an initialized HTTP Client Connector
	//
	this.setupHTTPClient = function(params) {
		if (!this.httpClient) {
			this.httpClient = system.loadConnector("ibmdi.HTTPClient");
			for (var paramName in params) {
				this.httpClient.setParam(paramName, params[paramName])
			}
			this.httpClient.initialize(null);
		}
		return this.httpClient
	}

	//
	// -- Returns the access token if we have an access token that hasn't expired
	//
	this.getToken = function() {
		return this.response ? this.response.access_token : null;
	}

	//
	// -- Sends a this.request to get a new access token
	// -- @return String Access token
	// -- @throws Exception
	//
	this.requestToken = function() {

		// -- If we already have a valid token return that
		if (this.getToken() != null) {
			if (this.debug) {
				task.logmsg("OAuth: returning current token");
			}
			return this.getToken();
		}

		//
		// -- Create this.request entry object
		//
		this.request = system.newEntry();
		this.request["url"] = this.url;
		this.request["http.body"] = this.urlEncode(this.params);
		this.request["http.method"] = "POST";
		this.request["http.content-type"] = "application/x-www-form-urlencoded";
		this.request["grant_type"] = this.params["grant_type"];
		//		this.request["grant_type"] = "client_credentials";
		this.request["scope"] = this.params["scope"];
		//		this.request["scope"] = "gmail.readonly";
		this.request["redirect_uri"] = this.params["redirect_uri"] | "url:itef:wg:oauth:2.0:oob";
		this.request["client_id"] = this.params["client_id"];
		this.request["client_secret"] = this.params["client_secret"];

		if (this.debug) {
			task.logmsg("Requesting AccessToken: url=" + this.url);
			task.logmsg(this.request.toJSON());
		}

		do {
			//
			// -- Send token this.request
			//
			this.setupHTTPClient(this.params);
			var response = this.httpClient.queryReply(this.request);
			var httpCode = response.getString("http.responseCode");

			// Log and check response for errors
			if (this.debug) {
				task.logmsg("this.request Access Token Response");
				task.logmsg("" + this.response);
			}
			if (response && response["http.bodyAsString"] != null) {
				var json = response["http.bodyAsString"].getValue();

				// Try to parse it
				try {
					this.response = fromJson(json);
	 				// See if it's an error
					if (this.response.error) {
						var err = "Error: " + this.response.error + ": " + this.response.error_description;
						this.response = null;
						throw err;
					}					
				} catch (parsingException) {
					// I guess it's not JSON
					this.response = {error: "Return is NOT JSON!"}
				}
			}

			// Check for redirect
			if (httpCode == 302) {
				var location = response.getString("http.Location");
				task.logmsg("Redirecting to: " + location);
				this.httpClient.setParam("url", location);
				this.httpClient.terminate();
				this.httpClient.initialize(null);
			}
		} while (httpCode == 302 && location.toLowerCase().indexOf("error") < 0)

		// Return the token	
		return this.getToken();

	};
}

// Return the OAUTH object itself
function getOAUTH() {
	return OAUTH
}

// Returns the OAuth access token
function getOAuthAccessToken(args) {
	// If this is the first time called, set up the OAuth2 object
	if (OAUTH == null) {
		type = args["grant_type"];
		if (type != "password") {
			args.grant_type = "client_credentials";
		}
		if (args.debug) {
			task.logmsg("Create OAuth2 this.request");
			task.logmsg(work.fromJSON(toJson(args)));
		}
		OAUTH = new OAuth2(args);
	}
	return OAUTH.requestToken();
}

// Returns a delimited string with the full stacktrace for the passed Exception e
function fullStacktrace(e, delimArg) {
	var delim = delimArg || "\n";
	var starry = [];
	// Log the full stack trace
	var stackTrace = e.getStackTrace(); // Get the stack trace as an array
	for (var i = 0; i < stackTrace.length; i++) {
		starry.push(stackTrace[i].toString())
	}
	return starry.join(delim)
}]]></parameter>
                </Script>
                <Script name="Test">
                    <ModTime>1733570226377</ModTime>
                    <parameter name="script"><![CDATA[try {

	var params = {
		debug: true
	};
	
	params["url"] = "https://accounts.google.com/o/oauth2/v2/auth";
	params["grant_type"] = "client_credentials";
	params["client_id"] = "983363903312-pbi3gclqthujko88r0l20i0ar0qn7ou0.apps.googleusercontent.com";
	params["client_secret"] = "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";
	params["scope"] = "gmail.readonly";
	params["redirect_uri"] = "url:itef:wg:oauth:2.0:oob";
	
	getCertificate(params["url"]);
	
	getOAuthAccessToken(params);



	
	var itimSwaggerJSON = loadFileToString("Restify/itim.swagger.json");

	var openAPISchema = new SCHEMA(itimSwaggerJSON, "JSON");
	var children = openAPISchema.getChildren("paths");
	for (var child in children) {
		task.logmsg(" --> " + child);
		var gcc = openAPISchema.getChildren(["paths", child]);
		for (var gc in gcc ) task.logmsg("     " + gc);
	}
	
	return;
	
	
	var endPoints = new ENDPOINTS({
		openAPIschema: itimSwaggerObj,
		schema: schema
	});

	for (res in endpoints) task.logmsg(res);
//	task.logmsg(work.fromJSON(toJson(endpoints)))
	
	
} catch (e) {
    // Check if the caught object is a Java Exception
    if (e instanceof java.lang.Exception) {
        // Log the exception message
        task.logmsg("An exception occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
        )
        
    } else {
        // Log a generic error for non-Java exceptions
        task.logmsg("An unknown error occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
		)
    }
}]]></parameter>
                </Script>
                <Connector name="ScriptConnector">
                    <InheritFrom>/Connectors/TestScriptConnector</InheritFrom>
                    <ModTime>1733319248032</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Disabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <parameter name="includeFiles"/>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    
        
    
    
    
    
        
        
    
        
    <AssemblyLine name="Reading schema 20241127 1304 before deleting pwds and secrets in Test">
            <ModTime>1732709002352</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Test it" state="Enabled"/>
                    <Component name="Init and Event Scripts from OpenPages" state="Enabled"/>
                    <Component name="Request Google API schema" state="Enabled"/>
                    <Component name="GMailLib" state="Enabled"/>
                    <Component name="Oauth stuff" state="Enabled"/>
                    <Component name="Parse OpenAPI Schema" state="Enabled"/>
                    <Component name="Test" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1732709002352</ModTime>
                <Script name="Test it">
                    <ModTime>1732109245808</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[var openApiJson = system.getScriptText("exampleGoogleSchemaJSON");
//var openApiYAML = system.getScriptText("exampleOpenAPISchemaYAML");
var s1 = parseOpenAPISchema(openApiJson);
//var s2 = parseOpenAPISchema(openApiYAML);

i = 42;]]></parameter>
                </Script>
                <Script name="Init and Event Scripts from OpenPages">
                    <ModTime>1732122125992</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[/////////////////////////////////// Init Script
var message = new Array();
var message = new Array();
message["Required parameter not set"] = "Required parameter not set";
message["Response from"] = "Response from";
message["Request to"] = "Request to";
message["Error from"] = "Error from";
message["You must restart the SDI server in order for the imported certificate to be trusted."] = "You must restart the SDI server in order for the imported certificate to be trusted.";
message["Unable to parse JSON return from"] = "Unable to parse JSON return from";
message["Invalid format for URL parameter"] = "Invalid format for URL parameter";

if (typeof(system) == "undefined") {
	var c = java.lang.Class.forName("com.ibm.di.function.UserFunctions");
	system = new c;
}	

var http = system.getConnector("ibmdi.HTTPClient");
var requestEntry = system.newEntry();
var cookies = system.newEntry();
var deBug = false;
var authenticated = false;
http.initialize(null);

/////////////////////////////////// Event Script
// 20140912 1248
var params = {	url : "", 
				root : "/grc/api",
				username : "", 
				password : "",
				object : "",
				query : "",
				
				refresh : function(connector) {
					for (var pname in this) {
						if (typeof this[pname] !== "function") {
							var control = form.getControl(pname);
							if (control !== null && control.getText() != null) {
								this[pname] = control.getText();
							}	
						}	
					}

					this.root = "/grc/api";

					if (!this.url.toLowerCase().endsWith(this.root.toLowerCase())) {
						this.url = this.url + this.fixPath(this.root);
					}	
//					form.alert("this.url: " + this.url + "\nthis.root: " + this.root)
				},
				
				apply : function(http) {
					for (var pname in this) {
						if (typeof this[pname] !== "function") {
							http.setParam(pname, this[pname]);
						}	
					}
				},

				fixPath : function(path) {
					if (!path.startsWith("/")) {
						path = "/" + path;
					}
					return path;
				}
			}


function getCertificate () {
	form.setWaitCursor();
	try {
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(url, 443);
	} finally {
		form.setNormalCursor();
	}
	form.alert(msg);
}

function getTypes() {
	params.refresh();
	params.apply(http);
	
	form.getClass();
	var combo = form.getControl("object");
	combo.removeAll();

	var reply = makeRequest({"verb" : "GET", 
							 "url" : "/types", 
							 "ctype" : "application/json", 
							 "where" : "getTypes"});

	if (typeof reply.length !== "undefined") {						 
		var arr = new java.util.ArrayList();

		arr.add("file (word, excel, etc)");
		for (var i = 0; i < reply.length; i++) {
			arr.add(reply[i].name);
		}
			
		arr = arr.toArray();
		java.util.Arrays.sort(arr);
	
		for (var a in arr) {
			combo.add(a);
		}	
		
		combo.select(0);
	}	
}

function makeRequest(args) {
	var verb = args.verb;		// HTTP method, e.g. GET, POST, PUT, ...
	var url = args.url;		// url for the request. May be partial (only the path & query string params)
	var body = args.body;		// HTTP body to be passed for the request
	var ctype = args.ctype;	// Content-Type of the HTTP body
	var where = args.where;	// where this method is called from - for debugging purposes

	// set default values for missing params/properties
	if (verb == null) { verb = "GET"; } 
	if (url == null) { url = ""; } 
	if (ctype == null) { ctype = "application/json"; }
	if (where == null) { where = ""; } 

	// prepend the base url if not found in the url passed to the function
	if (url.toLowerCase().indexOf(params.url.toLowerCase()) < 0) {
		url = params.url + params.fixPath(url);
	}
	
//	form.alert("url: " + url + "\n\n    params.url: " + params.url);
	
	requestEntry.removeAllAttributes();
	
	if (typeof body !== "undefined" && body !== null && body.trim().length > 0) {
		requestEntry["http.body"] = body;
	}
	
	// set Connector parameters
	http.setParam("method", verb.toUpperCase());
	http.setParam("url", url);

	// prepare the request Entry (used for POST/PUT calls)
	requestEntry["http.Content-Type"] = ctype;
	requestEntry["http.Accept"] = "application/json";
	requestEntry["http.Connection"] = "keep-alive";
	requestEntry["http.remote_user"] = params.username;
	requestEntry["http.remote_pass"] = params.password;

// commented out for now
//
//	requestEntry["http.Accept-Encoding"] = "gzip, deflate";
//	requestEntry["http.Accept-Language"] = "en-US,en;q=0.5";
//	requestEntry["http.User-Agent"] = "IBM Security Directory Integrator";
//	requestEntry["http.Authorization"] = "BASIC " + system.base64Encode(String(user + ":" + password).getBytes());
	
	// add any cookies received on previous calls
	if (cookies.size() > 0) {
//		requestEntry["X-CouchDB-WWW-Authenticate"] = "Cookie"; // TODO
		requestEntry.merge(cookies);
	}	

	// if Detailed Log is enabled then write request details to the log
	if (deBug) {
		logDetails({"msg" : message["Request to"] + " OpenPages", 
					"obj" : requestEntry, 
					"url" : url, 
					"verb" : verb, 
					"ctype" : ctype, 
					"where" : where});
	}

	var retry = 0;
	var maxRetry = 2;
	var retEntry = null;
	
	// this loop makes the actual request. If an SSL handshake error occurs, attempt to retrieve
	// and import the client certificate and inform the user that TDI must be restarted.
	//
	do {
		try {	
			retEntry = http.queryReply(requestEntry);
			
//			form.alert(retEntry.toString())
		} catch (ex) {
			if (ex instanceof javax.net.ssl.SSLHandshakeException) {
				if (retry == 0) {
					getCertificate();
				} else {	
					throwException(message["You must restart the SDI server in order for the imported certificate to be trusted."])
				}
			} else {
				throw ex;
			}	
		}
		
		retry++;
	} while (retEntry === null && retry < maxRetry);
	
	// if Detailed Log is enabled, write reply details to the log
	if (deBug) {
		logDetails({"msg" : message["Response from"] + " OpenPages", 
				    "entry" : retEntry});
	}
	
	verifyResponse(retEntry);
	
	// parse the reply from OpenPages
	var reply = parseReply(retEntry);
	
	return reply;
}

function throwException(msg) {
	throw new java.lang.IllegalArgumentException(msg);
}

function logmsg(lvl, msg) {
	if (typeof lvl === "undefined") { lvl = ""; } 
	if (typeof msg === "undefined") {
		msg = lvl;
		lvl = "INFO";
	}
	
	if (deBug) {
		java.lang.System.out.println(msg);
	}
		
	try {
		connector.logmsg(lvl, msg);
	} catch (ex) {
		main.logmsg(lvl, msg);
	}	
}

function getParam(pname, required) {
	if (typeof required === "undefined") { required = true; }
	var ctrl = form.getControl(pname);
	if (ctrl == null && required) {
		throwException(message["Required parameter not set"] + ": " + pname);
	}
	
	pval = ctrl.getText();
	
	if (pval === null && required) {
		throwException(message["Required parameter not set"] + ": " + pname);
	} 
	
	return pval;
}

function parseReply(replyEntry) {
	var body = replyEntry.getString("http.bodyAsString");
	
	try {
//		if (deBug) logmsg("DEBUG", "body: " + body);
		var jobj = fromJson(body);
		
		// save any cookies passed back	
		var setCookie = replyEntry.getAttribute("http.Set-Cookie");
		if (setCookie !== null) {
			for (var i = 0; i < setCookie.size(); i++) {
				var thisCookie = setCookie.getValue(i);
				var p = thisCookie.indexOf("=");
				if (p > 0) {
					cookies["http." + thisCookie.substring(0,p)] = thisCookie.substring(p+1);
				}
			}	
		}
	} catch (ex) {
		throwException(message["Unable to parse JSON return from"] + " OpenPages - " + ex);
	}	
	
	return jobj;
}

function fixUrl(params) {
	var url = params.url;
	var dbtype = params.dbtype;
	var protocolSpes = "http:";
	var auth = "";
	
	if (url.startsWith("http")) {
		var p = url.indexOf("/");
		if (p > 0) {
			protocolSpes = url.substring(0, p);
			var p2 = url.indexOf("/", p+1);
			if (p2 == (p+1)) {
				url = url.substring(p2+1);
			} else {
				throwException(message["Invalid format for URL parameter"] + ": " + url);
			}
		}
	}

	if (!url.endsWith("/")) {
		return protocolSpes + "//" + auth + url + "/";
	} else {
		return protocolSpes + "//" + auth + url;
	}
}

function logDetails(params) {
	var msg = params.msg;
	var obj = params.obj; 
	var url = params.url;
	var verb = params.verb;
	var ctype = params.ctype; 
	var where = params.where;
	
	if (msg == null) {
		msg = message["Unnamed entry"];
	}

	var s = new java.lang.StringBuffer();
	
	if (where != null) {
		s.append("\n@@@------> (" + where + ") " + msg);
	} else {
		s.append("\n---------> " + msg);
	}
	
	
	if (verb != null) { s.append("   " + verb.toUpperCase()); } 
	if (ctype != null) { s.append("   " + ctype); } 
	if (url != null) { s.append("   " + url); } 
	s.append("\n");

	if (obj != null) {
		if (obj instanceof com.ibm.di.entry.Entry) {	
			var attNames = obj.getAttributeNames();
			for (var a in attNames) {
				if (a.indexOf("http.") >= 0 && 
					!("http.bodyAsString".equalsIgnoreCase(a)
						|| "http.bodyAsBytes".equalsIgnoreCase(a)) ) {
					s += " " + a + ": " + obj[a] + "\n";
				}
			}	
		} else {
			s.append(obj.toString());
		}
	}	
	form.alert(s.toString());
}

function verifyResponse(replyEntry) {
	var respCode = replyEntry.getString("http.responseCode");
	if (!respCode.startsWith("2")) {
		throwException(message["Error from"] 
						+ " OpenPage server - code: " + respCode
						+ "  message: " + replyEntry.getString("http.responseMsg"));
	}
}

function authenticate() {
	var user = getParam("user");
	var password = getParam("password");
	var reply = makeRequest({verb : "POST", 
							 url : "_session", 
							 body : "name=" + user + "&password=" + password, 
							 ctype : "application/x-www-form-urlencoded", 
							 where : "authenticate",
							 authenticating : true});
	authenticated = true;
}]]></parameter>
                </Script>
                <Script name="Request Google API schema">
                    <ModTime>1732122116336</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// Function to connect to Google API, request the schema, and parse it into a JavaScript object
function fetchGoogleApiSchema(apiUrl, accessToken) {
    try {
        // Validate inputs
        if (!apiUrl || !accessToken) {
            throw new Error("API URL and Access Token are required.");
        }

        // Initialize the HTTP client connector
        var httpClient = system.getConnector("ibmdi.HTTPClient");
        httpClient.setParam("url", apiUrl);
        httpClient.setParam("method", "GET");
        httpClient.setParam("header.Authorization", "Bearer " + accessToken);
        httpClient.setParam("responseFormat", "text"); // Expect a JSON response in text format

        // Start the connector
        httpClient.initialize();
        
        // Send the request
        var response = httpClient.getNextEntry();
        if (!response) {
            throw new Error("No response received from the API.");
        }

        // Parse the JSON response into a JavaScript object
        var schemaData = response.getString("responseBody");
        var schemaObject = JSON.parse(schemaData); // Ensure JSON parsing for ECMAScript 3

        // Log the schema for debugging
        task.logmsg("Fetched Schema: " + schemaData);

        // Return the JavaScript object
        return schemaObject;

    } catch (error) {
        // Log and rethrow errors
        task.logmsg("Error fetching API schema: " + error.message);
        throw error;
    } finally {
        // Clean up the connector
        if (httpClient) {
            httpClient.cleanup();
        }
    }
}]]></parameter>
                </Script>
                <Script name="GMailLib">
                    <ModTime>1732461863551</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// Function to connect to Google API, request the schema, and parse it into a JavaScript object
function fetchGoogleApiSchema(apiUrl, accessToken) {
    try {
        // Validate inputs
        if (!apiUrl || !accessToken) {
            throw new javax.net.ssl.SSLException("API URL and Access Token are required.");
        }

    	// First, ensure we can establish HTTPS
    	// rrtificate(apiUrl);
    	
        // Initialize the HTTP client connector
        var httpClient = system.getConnector("ibmdi.HTTPClient");
        httpClient.setParam("url", apiUrl);
        httpClient.setParam("method", "GET");
        httpClient.setParam("header.Authorization", "Bearer " + accessToken);
        httpClient.setParam("responseFormat", "text"); // Expect a JSON response in text format

        // Start the connector
        httpClient.initialize(null);
        
        httpClient.selectEntries();
        
        // Send the request
        var response = null;
        while ((response = httpClient.getNextEntry()) != null) {
	        // Parse the JSON response into a JavaScript object
	        var schemaJson = response.getString("http.bodyAsString");
	        var schemaObj = fromJson(schemaJson); // Ensure JSON parsing for ECMAScript 3
	        logObj(schemaObj, 4);
        }
        
        if (!response) {
            throw new javax.net.ssl.SSLException("No response received from the API.");
        }        

        // Return the JavaScript object
        return schemaObj;

    } catch (error) {
        // Log and rethrow errors
        task.logmsg("ERROR", "Error fetching API schema: " + error.message);
        throw error;
    } finally {
        // Clean up the connector
        if (httpClient) {
            httpClient.cleanup();
        }
    }
}

// Print schema
function logObj(jsObj, depth) {
	if (!depth) depth = 6;
	
	for (var propName in jsObj) {
		task.logmsg("                         ".substring(0, (10-depth)*2) + propName);
		if (depth > 1) logObj(jsObj[propName], depth-1)
	}
}

// Ensure we have the cert and comms are secure
function getCertificate (url) {
	try {
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(url, 443);
	} finally {
		throw new javax.net.ssl.SSLException("A Certificate has been received and installed. Restart TDI.")
	}
	task.logmsg(msg);
}]]></parameter>
                </Script>
                <Script name="Oauth stuff">
                    <ModTime>1732654260088</ModTime>
                    <parameter name="script"><![CDATA[var OAUTH = null; // Will be instantiated below

// OAUTH is an object (as all js functions are) and is instantiated using this function (another object).
function OAuth2(params) {
	//
	// -- Token request parameters
	//
	this.params = params;
	this.debug = params.debug || false;

	//
	// -- Returns form-urlencoded string of an object
	//
	this.urlEncode = function (obj) {
		var arr = [];
		for(var f in obj) {
			arr.push(f + "=" + obj[f]);
		}
		return arr.join("&");
	}

	// 
	// -- Returns an initialized HTTP Client Connector
	//
	this.setupHTTPClient = function(params) {
		if (!this.httpClient) {
			this.httpClient = system.loadConnector("ibmdi.HTTPClient");
			for (var paramName in params) {
				this.httpClient.setParam(paramName, params[paramName])
			}
			this.httpClient.initialize(null);
		}
		return this.httpClient
	}
	
	//
 	// -- Returns the access token if we have an access token that hasn't expired
 	//
	this.getToken = function() {
		return this.response ? this.response.access_token : null;
	}
	
	//
	// -- Sends a request to get a new access token
	// -- @return String Access token
	// -- @throws Exception
	//
	this.requestToken = function () {

        // -- If we already have a valid token return that
        if(this.getToken() != null) {
			if(this.debug) {
                task.logmsg("OAuth: returning current token");
            }
            return this.getToken();
        }

		//
		// -- Create request entry object
		//
		var request = system.newEntry();
		request["http.body"] = this.urlEncode(this.params);
		request["http.method"] = "POST";
		request["http.url"] = this.url;
		request["http.content-type"] = "application/x-www-form-urlencoded";
//		request["grant_type"] = this.params["grant_type"];
		request["grant_type"] = "client_credentials";
		request["client_id"] = this.params["oauth.client_id"];
		request["client_secret"] = this.params["oauth.client_secret"];
//		request["scope"] = this.params["oauth.grant_type"];
		request["scope"] = "gmail.readonly";

		if(this.debug) {
			task.logmsg("Request AccessToken: url=" + this.url);
			task.logmsg(request.toJSON());
		}	
		
		//
		// -- Send token request
		//
		this.setupHTTPClient(this.params);
		var response = this.httpClient.queryReply(request);
		if(this.debug) {
            task.logmsg("Request Access Token Response");
            task.logmsg("" + response);
        }
		if(response && response["http.bodyAsString"] != null) {
			var json = response["http.bodyAsString"].getValue();
			this.response = fromJson(json);
			if(this.response.error) {
				var err = "Error: " + this.response.error + ": " + this.response.error_description;
				this.response = null;
				throw err;
			}
		}
		return this.getToken();
	}
};

// Check presence of arguments
function checkArgs(args, argNamesCSV) {
	var argName;
	var newArgs = {};

	// First make sure all args are passed to params
	for (var argName in args) params[argName] = args[argName];	

	// Now check if values are specified or not
	var argNames = system.splitString(argNamesCSV, ",");
	for (argName in argNames) {
		if (argName != "debug") {
			newArgs[argName] = typeof(args[argName]) != "undefined" ? args[argName] : "* " + argName + " not specified *"
		}	
	}
	newArgs.debug = args.debug || false;
	return newArgs
}

// Returns the OAuth access token
function getOAuthAccessToken(args) {
	// If this is the first time called, set up the OAuth2 object
	if(OAUTH == null) {
		// Verify arguments - set default value for debugging purpose
		args = checkArgs(args, "oauth.url,oauth.client_id,username,password,oauth.client_secret");
		
		type = args["oauth.grant_type"];
		if(type != "password") {
			args.grant_type = "client_credentials";
		}
		if(args.debug) {
			task.logmsg("Create OAuth2 request");
			task.logmsg(work.fromJSON(toJson(args)));
		}
		OAUTH = new OAuth2(args);
	}
	return OAUTH.requestToken();
}

// Returns a delimited string with the full stacktrace for the passed Exception e
function fullStacktrace(e, delimArg) {
	var delim = delimArg || "\n";
	var starry = []; 
	// Log the full stack trace
	var stackTrace = e.getStackTrace(); // Get the stack trace as an array
	for (var i = 0; i < stackTrace.length; i++) {
		starry.push(stackTrace[i].toString())
	}
	return starry.join(delim)
}]]></parameter>
                </Script>
                <Script name="Parse OpenAPI Schema">
                    <ModTime>1732654279764</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[function parseOpenAPISchema(openApiSchema) {
    openApiSchema = openApiSchema.trim();
	// Load Jackson libraries
    var ObjectMapper = Packages.com.fasterxml.jackson.databind.ObjectMapper;
    var objectMapper = new ObjectMapper();

    // Check if YAML and if so, convert to Json
    if (openApiSchema.startsWith("openapi: \"")) {
        // Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read
        var Yaml = Packages.org.yaml.snakeyaml.Yaml;
        // Create instances of Yaml and ObjectMapper
        var yaml = new Yaml();
        // Parse YAML into a Java Map
        var map = yaml.load(openApiSchema);

        // Convert Java Map to JSON string
        var jsonString = objectMapper.writeValueAsString(map)
    } else {
        jsonString = openApiSchema;
    }

    return fromJson(jsonString)
}]]></parameter>
                </Script>
                <Script name="Test">
                    <ModTime>1732709002352</ModTime>
                    <parameter name="script"><![CDATA[try {
/*	
	var params = {
		debug: true
	};
	
	params["oauth.url"] = "https://accounts.google.com/o/oauth2/v2/auth";
//	params["oauth.grant_type"] = "client_credentials";
	params["oauth.client_id"] = "983363903312-pbi3gclqthujko88r0l20i0ar0qn7ou0.apps.googleusercontent.com";
	params["oauth.client_secret"] = "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";
//	params["username"] = "eddiehartman@gmail.com";
//	params["password"] = "Bentemirakami23a!";
	
//	getOAuthAccessToken(params);
*/
	
	var itimSwagger = system.openFileForInput("Restify/itim.swagger.txt");
	var api = parseOpenAPISchema(itimSwagger)
	
	
} catch (e) {
    // Check if the caught object is a Java Exception
    if (e instanceof java.lang.Exception) {
        // Log the exception message
        task.logmsg("An exception occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
        )
        
    } else {
        // Log a generic error for non-Java exceptions
        task.logmsg("An unknown error occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
		)
    }
}]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="Reading schema 20241129 1319 almost there - 302 return">
            <ModTime>1732879848376</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="RestifyLib" state="Enabled"/>
                    <Component name="Oauth stuff" state="Enabled"/>
                    <Component name="Parse OpenAPI Schema" state="Enabled"/>
                    <Component name="Test" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1732879848376</ModTime>
                <Script name="RestifyLib">
                    <InheritFrom>/Scripts/RESTIFY library class</InheritFrom>
                    <ModTime>1732710775141</ModTime>
                </Script>
                <Script name="Oauth stuff">
                    <ModTime>1732879848376</ModTime>
                    <parameter name="script"><![CDATA[var OAUTH = null; // Will be instantiated below

// OAUTH is an object (as all js functions are) and is instantiated using this function (another object).
function OAuth2(params) {
	//
	// -- Token request parameters
	//
	this.params = params;
	this.debug = params.debug || false;
	this.url = params.url || "* url not specified *";

	//
	// -- Returns form-urlencoded string of an object
	//
	this.urlEncode = function (obj) {
		var arr = [];
		for(var f in obj) {
			arr.push(f + "=" + obj[f]);
		}
		return arr.join("&");
	}

	// 
	// -- Returns an initialized HTTP Client Connector
	//
	this.setupHTTPClient = function(params) {
		if (!this.httpClient) {
			this.httpClient = system.loadConnector("ibmdi.HTTPClient");
			for (var paramName in params) {
				this.httpClient.setParam(paramName, params[paramName])
			}
			this.httpClient.initialize(null);
		}
		return this.httpClient
	}
	
	//
 	// -- Returns the access token if we have an access token that hasn't expired
 	//
	this.getToken = function() {
		return this.response ? this.response.access_token : null;
	}
	
	//
	// -- Sends a request to get a new access token
	// -- @return String Access token
	// -- @throws Exception
	//
	this.requestToken = function () {

        // -- If we already have a valid token return that
        if(this.getToken() != null) {
			if(this.debug) {
                task.logmsg("OAuth: returning current token");
            }
            return this.getToken();
        }

		//
		// -- Create request entry object
		//
		var request = system.newEntry();
		request["url"] = this.url;
		request["http.body"] = this.urlEncode(this.params);
		request["http.method"] = "POST";
		request["http.content-type"] = "application/x-www-form-urlencoded";
		request["grant_type"] = this.params["grant_type"];
//		request["grant_type"] = "client_credentials";
		request["scope"] = this.params["scope"];
//		request["scope"] = "gmail.readonly";
		request["redirect_uri"] = this.params["redirect_uri"] | "url:itef:wg:oauth:2.0:oob";
		request["client_id"] = this.params["client_id"];
		request["client_secret"] = this.params["client_secret"];

		if(this.debug) {
			task.logmsg("Request AccessToken: url=" + this.url);
			task.logmsg(request.toJSON());
		}	
		
		//
		// -- Send token request
		//
		this.setupHTTPClient(this.params);
		var response = this.httpClient.queryReply(request);
		
		// Log and check response for errors
		if(this.debug) {
            task.logmsg("Request Access Token Response");
            task.logmsg("" + response);
        }
		if(response && response["http.bodyAsString"] != null) {
			var json = response["http.bodyAsString"].getValue();
			this.response = fromJson(json);
			if(this.response.error) {
				var err = "Error: " + this.response.error + ": " + this.response.error_description;
				this.response = null;
				throw err;
			}
		}
		return this.getToken();
	}
};

// Returns the OAuth access token
function getOAuthAccessToken(args) {
	// If this is the first time called, set up the OAuth2 object
	if(OAUTH == null) {
		type = args["grant_type"];
		if(type != "password") {
			args.grant_type = "client_credentials";
		}
		if(args.debug) {
			task.logmsg("Create OAuth2 request");
			task.logmsg(work.fromJSON(toJson(args)));
		}
		OAUTH = new OAuth2(args);
	}
	return OAUTH.requestToken();
}

// Returns a delimited string with the full stacktrace for the passed Exception e
function fullStacktrace(e, delimArg) {
	var delim = delimArg || "\n";
	var starry = []; 
	// Log the full stack trace
	var stackTrace = e.getStackTrace(); // Get the stack trace as an array
	for (var i = 0; i < stackTrace.length; i++) {
		starry.push(stackTrace[i].toString())
	}
	return starry.join(delim)
}]]></parameter>
                </Script>
                <Script name="Parse OpenAPI Schema">
                    <ModTime>1732713296286</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// The API class is handy for handling OpenAPI schema
var API = function(schemaStr, format) {
	
	// Main init logic after method definitions

    // The name says it all. Returns a JS Obj
    this.parseOpenAPISchema = function(openApiSchema) {
		// Not sure if this is necessary
        openApiSchema = openApiSchema.trim();

        // Load Jackson libraries
        var ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
        var objectMapper = new ObjectMapper();

        // Check if YAML and if so, convert to Json
        if ("YAML".equalsIgnoreCase(this.format)) {
            // Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read
            var Yaml = Packages.org.yaml.snakeyaml.Yaml;
            // Create instances of Yaml and ObjectMapper
            var yaml = new Yaml();
            // Parse YAML into a Java Map
            var map = yaml.load(openApiSchema);

            // Convert Java Map to JSON string
            var jsonString = objectMapper.writeValueAsString(map)
        } else {
            jsonString = openApiSchema;
        }

        return fromJson(jsonString)
    }

    // Returns the child elements (JS Obj) of the specified path
    // Root level if no argument or blank text passed
    this.getChildren = function(path) { 
        var children = {};
        path = path.replaceAll("/",".").replaceAll("\\", ".");
        if (path.startsWith(".")) path = path.substring(0, path.length-1);

        for (var childName in this.schemaObj[path]) {
            children[childName] = this.schemaObj[path][childName];
        }

        return children;
    }
    
    // Main init logic
    this.schemaStr = schemaStr;
    this.format = format || "YAML";
    this.apiObj = this.parseOpenAPISchema(schemaStr)
}]]></parameter>
                </Script>
                <Script name="Test">
                    <ModTime>1732879474425</ModTime>
                    <parameter name="script"><![CDATA[try {

	var params = {
		debug: true
	};
	
	params["url"] = "https://accounts.google.com/o/oauth2/v2/auth";
	params["grant_type"] = "client_credentials";
	params["client_id"] = "983363903312-pbi3gclqthujko88r0l20i0ar0qn7ou0.apps.googleusercontent.com";
	params["client_secret"] = "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";
	params["scope"] = "gmail.readonly";
	params["redirect_uri"] = "url:itef:wg:oauth:2.0:oob";
	
	getCertificate(params["url"]);
	
	getOAuthAccessToken(params);



	
	var itimSwagger = loadFileToString("Restify/itim.swagger.txt", "YAML");
	var api = new API(itimSwagger);
	
	var resourceItems = api.getChildren("/paths")
	
	
} catch (e) {
    // Check if the caught object is a Java Exception
    if (e instanceof java.lang.Exception) {
        // Log the exception message
        task.logmsg("An exception occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
        )
        
    } else {
        // Log a generic error for non-Java exceptions
        task.logmsg("An unknown error occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
		)
    }
}]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="Reading schema 20241201 1319">
            <ModTime>1733408034353</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="RestifyLib" state="Enabled"/>
                    <Component name="Oauth stuff" state="Enabled"/>
                    <Component name="Parse OpenAPI Schema" state="Enabled"/>
                    <Component name="Test" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1733408034353</ModTime>
                <Script name="RestifyLib">
                    <InheritFrom>/Scripts/RESTIFY library class</InheritFrom>
                    <ModTime>1732710775141</ModTime>
                </Script>
                <Script name="Oauth stuff">
                    <ModTime>1733055492511</ModTime>
                    <parameter name="script"><![CDATA[var OAUTH = null; // Will be instantiated below

// OAUTH is an object (as all js functions are) and is instantiated using this function (another object).
function OAuth2(params) {
	//
	// -- Token this.request parameters
	//
	this.params = params;
	this.debug = params.debug || false;
	this.url = params.url || "* url not specified *";

	//
	// -- Returns form-urlencoded string of an object
	//
	this.urlEncode = function(obj) {
		var arr = [];
		for (var f in obj) {
			arr.push(f + "=" + obj[f]);
		}
		return arr.join("&");
	}

	// 
	// -- Returns an initialized HTTP Client Connector
	//
	this.setupHTTPClient = function(params) {
		if (!this.httpClient) {
			this.httpClient = system.loadConnector("ibmdi.HTTPClient");
			for (var paramName in params) {
				this.httpClient.setParam(paramName, params[paramName])
			}
			this.httpClient.initialize(null);
		}
		return this.httpClient
	}

	//
	// -- Returns the access token if we have an access token that hasn't expired
	//
	this.getToken = function() {
		return this.response ? this.response.access_token : null;
	}

	//
	// -- Sends a this.request to get a new access token
	// -- @return String Access token
	// -- @throws Exception
	//
	this.requestToken = function() {

		// -- If we already have a valid token return that
		if (this.getToken() != null) {
			if (this.debug) {
				task.logmsg("OAuth: returning current token");
			}
			return this.getToken();
		}

		//
		// -- Create this.request entry object
		//
		this.request = system.newEntry();
		this.request["url"] = this.url;
		this.request["http.body"] = this.urlEncode(this.params);
		this.request["http.method"] = "POST";
		this.request["http.content-type"] = "application/x-www-form-urlencoded";
		this.request["grant_type"] = this.params["grant_type"];
		//		this.request["grant_type"] = "client_credentials";
		this.request["scope"] = this.params["scope"];
		//		this.request["scope"] = "gmail.readonly";
		this.request["redirect_uri"] = this.params["redirect_uri"] | "url:itef:wg:oauth:2.0:oob";
		this.request["client_id"] = this.params["client_id"];
		this.request["client_secret"] = this.params["client_secret"];

		if (this.debug) {
			task.logmsg("Requesting AccessToken: url=" + this.url);
			task.logmsg(this.request.toJSON());
		}

		do {
			//
			// -- Send token this.request
			//
			this.setupHTTPClient(this.params);
			var response = this.httpClient.queryReply(this.request);
			var httpCode = response.getString("http.responseCode");

			// Log and check response for errors
			if (this.debug) {
				task.logmsg("this.request Access Token Response");
				task.logmsg("" + this.response);
			}
			if (response && response["http.bodyAsString"] != null) {
				var json = response["http.bodyAsString"].getValue();

				// Try to parse it
				try {
					this.response = fromJson(json);
	 				// See if it's an error
					if (this.response.error) {
						var err = "Error: " + this.response.error + ": " + this.response.error_description;
						this.response = null;
						throw err;
					}					
				} catch (parsingException) {
					// I guess it's not JSON
					this.response = {error: "Return is NOT JSON!"}
				}
			}

			// Check for redirect
			if (httpCode == 302) {
				var location = response.getString("http.Location");
				task.logmsg("Redirecting to: " + location);
				this.httpClient.setParam("url", location);
				this.httpClient.terminate();
				this.httpClient.initialize(null);
			}
		} while (httpCode == 302 && location.toLowerCase().indexOf("error") < 0)

		// Return the token	
		return this.getToken();

	};
}

// Return the OAUTH object itself
function getOAUTH() {
	return OAUTH
}

// Returns the OAuth access token
function getOAuthAccessToken(args) {
	// If this is the first time called, set up the OAuth2 object
	if (OAUTH == null) {
		type = args["grant_type"];
		if (type != "password") {
			args.grant_type = "client_credentials";
		}
		if (args.debug) {
			task.logmsg("Create OAuth2 this.request");
			task.logmsg(work.fromJSON(toJson(args)));
		}
		OAUTH = new OAuth2(args);
	}
	return OAUTH.requestToken();
}

// Returns a delimited string with the full stacktrace for the passed Exception e
function fullStacktrace(e, delimArg) {
	var delim = delimArg || "\n";
	var starry = [];
	// Log the full stack trace
	var stackTrace = e.getStackTrace(); // Get the stack trace as an array
	for (var i = 0; i < stackTrace.length; i++) {
		starry.push(stackTrace[i].toString())
	}
	return starry.join(delim)
}]]></parameter>
                </Script>
                <Script name="Parse OpenAPI Schema">
                    <ModTime>1732713296286</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// The API class is handy for handling OpenAPI schema
var API = function(schemaStr, format) {
	
	// Main init logic after method definitions

    // The name says it all. Returns a JS Obj
    this.parseOpenAPISchema = function(openApiSchema) {
		// Not sure if this is necessary
        openApiSchema = openApiSchema.trim();

        // Load Jackson libraries
        var ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
        var objectMapper = new ObjectMapper();

        // Check if YAML and if so, convert to Json
        if ("YAML".equalsIgnoreCase(this.format)) {
            // Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read
            var Yaml = Packages.org.yaml.snakeyaml.Yaml;
            // Create instances of Yaml and ObjectMapper
            var yaml = new Yaml();
            // Parse YAML into a Java Map
            var map = yaml.load(openApiSchema);

            // Convert Java Map to JSON string
            var jsonString = objectMapper.writeValueAsString(map)
        } else {
            jsonString = openApiSchema;
        }

        return fromJson(jsonString)
    }

    // Returns the child elements (JS Obj) of the specified path
    // Root level if no argument or blank text passed
    this.getChildren = function(path) { 
        var children = {};
        path = path.replaceAll("/",".").replaceAll("\\", ".");
        if (path.startsWith(".")) path = path.substring(0, path.length-1);

        for (var childName in this.schemaObj[path]) {
            children[childName] = this.schemaObj[path][childName];
        }

        return children;
    }
    
    // Main init logic
    this.schemaStr = schemaStr;
    this.format = format || "YAML";
    this.apiObj = this.parseOpenAPISchema(schemaStr)
}]]></parameter>
                </Script>
                <Script name="Test">
                    <ModTime>1733408034353</ModTime>
                    <parameter name="script"><![CDATA[try {

	var params = {
		debug: true
	};
	
	params["url"] = "https://accounts.google.com/o/oauth2/v2/auth";
	params["grant_type"] = "client_credentials";
	params["client_id"] = "983363903312-pbi3gclqthujko88r0l20i0ar0qn7ou0.apps.googleusercontent.com";
	params["client_secret"] = "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";
	params["scope"] = "gmail.readonly";
	params["redirect_uri"] = "url:itef:wg:oauth:2.0:oob";
	
	getCertificate(params["url"]);
	
	getOAuthAccessToken(params);



	
	var itimSwagger = loadFileToString("Restify/itim.swagger.txt", "YAML");
	var api = new API(itimSwagger);
	
	var resourceItems = api.getChildren("paths")
	for (var ri in resourceItems) task.logmsg(ri)
	
	
} catch (e) {
    // Check if the caught object is a Java Exception
    if (e instanceof java.lang.Exception) {
        // Log the exception message
        task.logmsg("An exception occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
        )
        
    } else {
        // Log a generic error for non-Java exceptions
        task.logmsg("An unknown error occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
		)
    }
}]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="Reading schema 20241201 1900">
            <ModTime>1733070377917</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="RestifyLib" state="Enabled"/>
                    <Component name="Oauth stuff" state="Enabled"/>
                    <Component name="API class" state="Enabled"/>
                    <Component name="ENDPOINTS class" state="Enabled"/>
                    <Component name="Test" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1733070377917</ModTime>
                <Script name="RestifyLib">
                    <InheritFrom>/Scripts/RESTIFY library class</InheritFrom>
                    <ModTime>1732710775141</ModTime>
                </Script>
                <Script name="Oauth stuff">
                    <ModTime>1733055492511</ModTime>
                    <parameter name="script"><![CDATA[var OAUTH = null; // Will be instantiated below

// OAUTH is an object (as all js functions are) and is instantiated using this function (another object).
function OAuth2(params) {
	//
	// -- Token this.request parameters
	//
	this.params = params;
	this.debug = params.debug || false;
	this.url = params.url || "* url not specified *";

	//
	// -- Returns form-urlencoded string of an object
	//
	this.urlEncode = function(obj) {
		var arr = [];
		for (var f in obj) {
			arr.push(f + "=" + obj[f]);
		}
		return arr.join("&");
	}

	// 
	// -- Returns an initialized HTTP Client Connector
	//
	this.setupHTTPClient = function(params) {
		if (!this.httpClient) {
			this.httpClient = system.loadConnector("ibmdi.HTTPClient");
			for (var paramName in params) {
				this.httpClient.setParam(paramName, params[paramName])
			}
			this.httpClient.initialize(null);
		}
		return this.httpClient
	}

	//
	// -- Returns the access token if we have an access token that hasn't expired
	//
	this.getToken = function() {
		return this.response ? this.response.access_token : null;
	}

	//
	// -- Sends a this.request to get a new access token
	// -- @return String Access token
	// -- @throws Exception
	//
	this.requestToken = function() {

		// -- If we already have a valid token return that
		if (this.getToken() != null) {
			if (this.debug) {
				task.logmsg("OAuth: returning current token");
			}
			return this.getToken();
		}

		//
		// -- Create this.request entry object
		//
		this.request = system.newEntry();
		this.request["url"] = this.url;
		this.request["http.body"] = this.urlEncode(this.params);
		this.request["http.method"] = "POST";
		this.request["http.content-type"] = "application/x-www-form-urlencoded";
		this.request["grant_type"] = this.params["grant_type"];
		//		this.request["grant_type"] = "client_credentials";
		this.request["scope"] = this.params["scope"];
		//		this.request["scope"] = "gmail.readonly";
		this.request["redirect_uri"] = this.params["redirect_uri"] | "url:itef:wg:oauth:2.0:oob";
		this.request["client_id"] = this.params["client_id"];
		this.request["client_secret"] = this.params["client_secret"];

		if (this.debug) {
			task.logmsg("Requesting AccessToken: url=" + this.url);
			task.logmsg(this.request.toJSON());
		}

		do {
			//
			// -- Send token this.request
			//
			this.setupHTTPClient(this.params);
			var response = this.httpClient.queryReply(this.request);
			var httpCode = response.getString("http.responseCode");

			// Log and check response for errors
			if (this.debug) {
				task.logmsg("this.request Access Token Response");
				task.logmsg("" + this.response);
			}
			if (response && response["http.bodyAsString"] != null) {
				var json = response["http.bodyAsString"].getValue();

				// Try to parse it
				try {
					this.response = fromJson(json);
	 				// See if it's an error
					if (this.response.error) {
						var err = "Error: " + this.response.error + ": " + this.response.error_description;
						this.response = null;
						throw err;
					}					
				} catch (parsingException) {
					// I guess it's not JSON
					this.response = {error: "Return is NOT JSON!"}
				}
			}

			// Check for redirect
			if (httpCode == 302) {
				var location = response.getString("http.Location");
				task.logmsg("Redirecting to: " + location);
				this.httpClient.setParam("url", location);
				this.httpClient.terminate();
				this.httpClient.initialize(null);
			}
		} while (httpCode == 302 && location.toLowerCase().indexOf("error") < 0)

		// Return the token	
		return this.getToken();

	};
}

// Return the OAUTH object itself
function getOAUTH() {
	return OAUTH
}

// Returns the OAuth access token
function getOAuthAccessToken(args) {
	// If this is the first time called, set up the OAuth2 object
	if (OAUTH == null) {
		type = args["grant_type"];
		if (type != "password") {
			args.grant_type = "client_credentials";
		}
		if (args.debug) {
			task.logmsg("Create OAuth2 this.request");
			task.logmsg(work.fromJSON(toJson(args)));
		}
		OAUTH = new OAuth2(args);
	}
	return OAUTH.requestToken();
}

// Returns a delimited string with the full stacktrace for the passed Exception e
function fullStacktrace(e, delimArg) {
	var delim = delimArg || "\n";
	var starry = [];
	// Log the full stack trace
	var stackTrace = e.getStackTrace(); // Get the stack trace as an array
	for (var i = 0; i < stackTrace.length; i++) {
		starry.push(stackTrace[i].toString())
	}
	return starry.join(delim)
}]]></parameter>
                </Script>
                <Script name="API class">
                    <ModTime>1733069881157</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// The API class is handy for requesting and parsing OpenAPI schema to a JS object for analysis
var API = function(schemaStr, format) {
	this.name = "API";
	
	// Main init logic after method definitions

    // The name says it all. Returns a JS Obj
    this.parseOpenAPISchema = function(openApiSchema) {
		// Not sure if this is necessary
        openApiSchema = openApiSchema.trim();

        // Load Jackson libraries
        var ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
        var objectMapper = new ObjectMapper();

        // Check if YAML and if so, convert to Json
        if ("YAML".equalsIgnoreCase(this.format)) {
            // Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read
            var Yaml = Packages.org.yaml.snakeyaml.Yaml;
            // Create instances of Yaml and ObjectMapper
            var yaml = new Yaml();
            // Parse YAML into a Java Map
            var map = yaml.load(openApiSchema);

            // Convert Java Map to JSON string
            var jsonString = objectMapper.writeValueAsString(map)
        } else {
            jsonString = openApiSchema;
        }

        this.schemaObj = fromJson(jsonString);
        return this.schemaObj
    }

    // Returns the child elements (JS Obj) of the specified path
    // Root level if no argument or blank text passed
    this.getChildren = function(path) { 
        var children = {};
        path = path.replaceAll("/",".").replaceAll("\\\\", ".");
        if (path.startsWith(".")) path = path.substring(1);

        for (var childName in this.schemaObj[path]) {
            children[childName] = this.schemaObj[path][childName];
        }

        return children;
    }
    
    // Main init logic
    this.schemaStr = schemaStr;
    this.format = format || "YAML";
    this.apiObj = this.parseOpenAPISchema(schemaStr)
}]]></parameter>
                </Script>
                <Script name="ENDPOINTS class">
                    <ModTime>1733070377917</ModTime>
                    <parameter name="script"><![CDATA[// ENDPOINTS class to parse the schema object
var ENDPOINTS = function(args) {
	this.name = "ENDPOINTS";

	this.schema = args.openAPIschema || {};
	this.api = args.api || null;
	this.hm = new java.util.HashMap();
	this.resources = {};
	this.paths = {};
	this.uriList = system.splitString("", "");	// Empty array
	this.config = {};

	
	
	// Main processing starts here
	if (!this.api || this.schema == {}) {
		throw "ENDPOINTS constructure requires the OpenAPI schema and instantiated API object"
	}
	
	// Get the various URIs and parse into parts to analyze
	for (var uri in this.schema) {
		var arr = this.hm.get(uri);
		if (arr == null) {
			arr = [];
			this.hm.put(uri.substring(1), arr)
		}
		arr.push(this.schema[uri])
	}

	// Set up a sorted array of the paths returned
	this.uriList = this.hm.keySet().toArray();
	java.util.Arrays.sort(this.uriList);
	
	// Now to parse each to retrieve the first part of the base - the resource item type
	for (var uri in this.uriList) {
		var parts = system.splitString(uri, "/");
		var 
	}
	
	
	// check it
	var keys = hm.keySet().toArray();
	java.util.Arrays.sort(keys);
	for (var key in keys) {
		task.logmsg("-----> " + key)
	}
	
	return hm
}]]></parameter>
                </Script>
                <Script name="Test">
                    <ModTime>1733069664236</ModTime>
                    <parameter name="script"><![CDATA[try {

	var params = {
		debug: true
	};
	
	params["url"] = "https://accounts.google.com/o/oauth2/v2/auth";
	params["grant_type"] = "client_credentials";
	params["client_id"] = "983363903312-pbi3gclqthujko88r0l20i0ar0qn7ou0.apps.googleusercontent.com";
	params["client_secret"] = "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";
	params["scope"] = "gmail.readonly";
	params["redirect_uri"] = "url:itef:wg:oauth:2.0:oob";
	
	getCertificate(params["url"]);
	
	getOAuthAccessToken(params);



	
	var itimSwaggerObj = loadFileToString("Restify/itim.swagger.txt", "YAML");

	var api = new API(itimSwaggerObj);
	var endPoints = new ENDPOINTS({
		openAPIschema: itimSwaggerObj,
		api: api
	});

	for (res in endpoints) task.logmsg(res);
//	task.logmsg(work.fromJSON(toJson(endpoints)))
	
	
} catch (e) {
    // Check if the caught object is a Java Exception
    if (e instanceof java.lang.Exception) {
        // Log the exception message
        task.logmsg("An exception occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
        )
        
    } else {
        // Log a generic error for non-Java exceptions
        task.logmsg("An unknown error occurred: " + e 
//        	+ "\n-------\n" + fullStacktrace(e));
		)
    }
}]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    
    <AssemblyLine name="_test">
            <ModTime>1733598679662</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="functions and __global variables" state="Enabled"/>
                    <Component name="test it" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1733598679662</ModTime>
                <Script name="functions and __global variables">
                    <ModTime>1733598679662</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[//
//						GLOBAL VARIABLES
//
var __debug = true;
var __schema = null;
var __initialized = false;
var __lib = null;

//
//							FUNCTIONS
//

function alert(msg) {
	if (__debug) task.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	eval(system.getScriptText("RESTIFY library class"));
	__lib = new RESTIFY();
	
	parseSchema();
}

// Return the openAPI schema - @TEST hardcoded for now
function parseSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
    var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
    
    //alert("Creating SCHEMA object");
	eval(system.getScriptText("SCHEMA class"));    
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    var toplvl = "";
    for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with resource items
function fetchItems() {
	//alert("---> fetchItems");
    var path = "paths"; //form.getControl("PathToObjects").getText();

    updateDropdown("Item",
        ["paths" /*form.getControl("PathToObjects").getText()*/],
        "Cannot fetch operations for a resource item")

}

// Update the dropdown with opera tions for the selected item
function fetchOperations() {
	alert("---> fetchOperations");
    var selectedItem = ""; // form.getControl("Items").getText();

    updateDropdown("Operation",
        ["paths",
            selectedItem],
        "Cannot fetch operations for a resource item")
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) throw "Item Path must be set";

        var subtree = __schema.getChildren(path);
        
    	alertObject("Subtree", subtree);

		//combo.removeAll(); // Empty drop-down
    			
        for (var res in subtree) {
            alert("   ..adding " + res);
            //combo.add(res)
            if (path = "paths") __selectedItem = res;
        }
        alert("drop-down updated!")
    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }

    //combo.select(0)

}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <Script name="test it">
                    <ModTime>1733597854378</ModTime>
                    <parameter name="script"><![CDATA[fetchItems();
fetchOperations();

for (pname in __schema) task.logmsg(pname)]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="_test 20241207 1212">
            <ModTime>1733498821875</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="eventScript" state="Enabled"/>
                    <Component name="Test it" state="Enabled"/>
                    <Component name="SCHEMA class" state="Enabled"/>
                    <Component name="Chat test" state="Enabled"/>
                    <Component name="Test" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1733498821875</ModTime>
                <Script name="eventScript">
                    <ModTime>1733415837946</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[//
//						INITIALIZATION
// 
// Load library scripts used
eval(system.getScriptText("RestifyLib"))
eval(system.getScriptText("ENDPOINTS"));
eval(system.getScriptText("SCHEMA"));

// Some global variables, since buttons cannot pass
// arguments to functions
var _GLOBAL = {
	schema: null 
} 

//
//						FUNCTIONS
//
// Update the dropdown with resource items
function fetchItems() {
	updateDropdown("Object", "Cannot fetch resource items")
}

// Update the dropdown with operations for the selected item
function fetchOperations() {
	updateDropdown("Operation", "Cannot fetch operations for a resource item")
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	var schemaJSON = loadFileToString("_Restify/itim_swagger.json");
	_GLOBAL.schema = fromJson(schemaJSON);
	return _GLOBAL.schema
}

// Parse returned endpoint URIs
function parseURI(uri) {
	var parts = system.splitString(uri.trim(), "/");
	var itm = {name: parts[0].trim()};
	
	for (var i = 1; i < parts.length; i++) {
		part = parts[i].trim();
		if (part.startsWith("{") && part.endsWith("}")) { // Then this is the Lookup on uid uri
			itm.uid = part;
			if (i > 1) { // The id is at the end of the path
				itm.relInfo = parts[1]
			} else
			if (i+1 >= parts.length) {
				itm.relInfo = parts[parts.length-1]
			}
		}
	}
	
	task.logmsg(work.fromJSON(toJson(itm)));
	
	return itm
}

// Update dropdown based on REST call
function updateDropdown(controlName, errorMsg) {
	var combo = "";
	var itemPath = (form.getControl("PathToObjects").getText() || "").trim();
		
	try {
		if (!itemPath) throw "Item Path must be set";
		
		fetchSchema();
		
		if (!_GLOBAL.schema) throw "No schema returned!"

		combo.close()
		combo = form.getControl(controlName);
	
		combo.removeAll(); // Empty drop-down
	
		var list = [];
		for (var itm in _GLOBAL.schema[itemPath])  {
			var itm = {name: _GLOBAL.schema[itemPath]};
			if (typeof itm == "string" && itm.startsWith("./")) {
				var itm = parsePath(itm);
			}
			combo.add(itm.name);
		}
		form.alert(list)
	
		if (!jsObj.items) {
			combo.add(jsObj[propertyName])
		} else {
			arr = new java.util.ArrayList()
			for (i = 0; i < jsObj.items.length; i++) {
				p = jsObj.items[i]
				label = p["label"]
				if (typeof(label) == "undefined")
					val = p[propertyName]
				else
					val = label + " |<<" + p[propertyName] + ">>|"
	//			form.alert(">> provider: " + p.uri)
				arr.add(val)
			}
			
			arr = arr.toArray()
			java.util.Arrays.sort(arr)
	
			for (var a in arr) {
				combo.add(a)
			}	
		}
	} catch (ex) {
		var msg = "Cannot get API schema - " + ex;
		form.alert(msg);
		throw msg
	}
	
	combo.select(0)
	
}

// Make REST call
function makeCall(useURI, errorMsg, callType) {
	var url
	var user
	var password
	var httpEntry
	var jsonStr
	var jsObj
	var p
	var p2
	var embeddedURI
	var userAndPassword
	
	user = form.getControl("user").getText()
	password = form.getControl("password").getText()
	url = form.getControl("baseURL").getText()
	
	p = useURI.indexOf("|<<")
	p2 = useURI.indexOf(">>|")
	if (p > 0 && p2 > 0 && p2 > p) {
		embeddedURI = useURI.substring(p+3, p2)
		useURI = embeddedURI + useURI.substring(p2+3)
	}	

	if (useURI.startsWith("/providers//providers"))
		useURI = useURI.substring(11)
		
//	p = url.indexOf("//")
//	url = url.substring(0,p+2) + userAndPassword + url.substring(p+2)

//	form.alert("baseURL: " + url)
//	form.alert("useURI: " + useURI)
//	form.alert("both combined: " + url + useURI)

	http.setParam("url", url + useURI)
	http.setParam("username", user)
	http.setParam("password", password)
	http.initialize(null)
	httpEntry = system.newEntry();
	httpEntry["http.content-type"] = "application/json"
	httpEntry["http.method"] = "GET"
	httpEntry["http.accept"] = "application/json"

//	form.alert("@@@ making call to " + http.getParam("url") + " with: \n" + httpEntry.toString()) // @@@

	httpEntry = http.queryReply(httpEntry)
	
//form.alert(httpEntry)
	
	if (httpEntry == null) 
		throw "Communication error * " + errorMsg + " - url used: " url + useURI + " --> return http.body:\n" + jsonStr

	jsonStr = httpEntry.getString("http.bodyAsString")
	
//	write("makeCall " + callType + ".txt", "url: " + url // @@@@
//						+ "\nuser: " + user
//						+ "\npassword: " + password
//						+ "\npayload:\n" + httpEntry.toString())
//	form.alert("@@@ " + callType + "\n" + jsonStr)
	
	if (jsonStr == null)
		throw errorMsg + " (Nothing returned) - url used: " http.getParam("url") + " --> return http.body:\n" + jsonStr

//	eval("json=" + jsonStr)
	try {
		jsObj = fromJson(jsonStr)
	} catch (ex) {
		throw errorMsg + " - Error parsing JSON received: " + ex + "   JSON: " + jsonStr
	}

	if (typeof(jsObj) == "undefined" || !jsObj || jsObj == null)
		throw errorMsg + "(Could not parse) - url used: " http.getParam("url") + " --> return http.body:\n" + jsonStr

	return jsObj
}

function fetchParams() {
	var params = makeCall(form.getControl("dataset").getText() + "/parameters", 
							"No Dataset parameters returned",
							"getParams")
	var formconfig = form.getFormConfig()
	var fs
	var p
	var fic
	
	// create dataset section
	if( formconfig.getSection("Dataset") == null ) {
		throw "Connection form is missing the 'Dataset' section!"
//		fs = new com.ibm.di.config.base.FormSectionImpl()
//		fs.setName("Dataset")
//		fs.setTitle("Provider Dataset")
//		formconfig.addSection(fs)
	}

	// get fs as section handle
	fs = formconfig.getSection("Dataset");

	// remove all dataset section fields
	for(str in fs.getNames()) {
		formconfig.removeFormItem(str);
	}

	// remove all params from section dataset
	fs.getNames().removeAllElements();

	
	// create a new param_* field and add it to Dataset section

	for (var i = 0; i < params.items.length; i++)  {
		if (params.items[i].hidden != "true") {
			p = params.items[i]
			fic = formconfig.newFormItem(p.id)
			fic.setLabel(p.label)
			fic.setSyntax(p.type)
			fic.setToolTip(p.description)
			fic.setRequired(p.required != "false")
			
			if ( ("!" + p["default"]) != "!undefined" )
				fic.setDefaultValue(p["default"])
			else
				fic.setDefaultValue("")
			
			fs.getNames().add(fic.getShortName())
		}
	}		
		
	form.resetForm();
	form.initialize();
}

// The API class is handy for requesting and parsing OpenAPI schema to a JS object for analysis
var API = function(schemaStr, format) {
	_WHERE = "ENDPOINTS class";	
	this.name = "API";
	
	// Main init logic after method definitions

    // The name says it all. Returns a JS Obj
    this.parseOpenAPISchema = function(openApiSchema) {
		// Not sure if this is necessary
        openApiSchema = openApiSchema.trim();

        // Load Jackson libraries
        var ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
        var objectMapper = new ObjectMapper();

        // Check if YAML and if so, convert to Json
        if ("YAML".equalsIgnoreCase(this.format)) {
            // Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read
            var Yaml = Packages.org.yaml.snakeyaml.Yaml;
            // Create instances of Yaml and ObjectMapper
            var yaml = new Yaml();
            // Parse YAML into a Java Map
            var map = yaml.load(openApiSchema);

            // Convert Java Map to JSON string
            var jsonString = objectMapper.writeValueAsString(map)
        } else {
            jsonString = openApiSchema;
        }

        this.schemaObj = fromJson(jsonString);
        return this.schemaObj
    }

    // Returns the child elements (JS Obj) of the specified path
    // Root level if no argument or blank text passed
    this.getChildren = function(path) { 
        var children = {};
        path = path.replaceAll("/",".").replaceAll("\\\\", ".");
        if (path.startsWith(".")) path = path.substring(1);

        for (var childName in this.schemaObj[path]) {
            children[childName] = this.schemaObj[path][childName];
        }

        return children;
    }
    
    // Main init logic
    this.schemaStr = schemaStr;
    this.format = format || "YAML";
    this.apiObj = this.parseOpenAPISchema(schemaStr)
}

function loadFileToString(filepath) {
	var sb = new java.lang.StringBuilder();
	var file = system.openFileForInput(filepath);
	var line;
	while ((line = file.readLine()) != null) {
		sb.append(line + "\n");
	}
	return sb.toString();
}

// ENDPOINTS class to parse the schema object
var ENDPOINTS = function(args) {
	_WHERE = "ENDPOINTS class";
	this.name = "ENDPOINTS";

	this.schema = args.openAPIschema || {};
	this.api = args.api || null;
	this.hm = new java.util.HashMap();
	this.resources = {};
	this.paths = {};
	this.uriList = system.splitString("", "");	// Empty array
	this.config = {};

	
	
	// Main processing starts here
	if (!this.api || this.schema == {}) {
		throw "ENDPOINTS constructure requires the OpenAPI schema and instantiated API object"
	}
	
	// Get the various URIs and parse into parts to analyze
	for (var uri in this.schema) {
		var arr = this.hm.get(uri);
		if (arr == null) {
			arr = [];
			this.hm.put(uri.substring(1), arr)
		}
		arr.push(this.schema[uri])
	}

	// Set up a sorted array of the paths returned
	this.uriList = this.hm.keySet().toArray();
	java.util.Arrays.sort(this.uriList);
	
	// The next step is to create
	
	// Now to parse each to retrieve the first part of the base - the resource item type
	for (var uri in this.uriList) {
		var parts = system.splitString(uri, "/");
		var type = parts[0].trim();
		for (var i = 1; i < parts.length; i++) {
			var bit = parts[i].trim();
			// Check if it's an identifier
			if (bit.startWith("{") && bit.endsWith("}")) {
				
			}
		}
	}
	
	
	// check it
	var keys = hm.keySet().toArray();
	java.util.Arrays.sort(keys);
	for (var key in keys) {
		task.logmsg("-----> " + key)
	}
	
	return this.hm
}

function write(fname, str) {
	var bw = new java.io.BufferedWriter(new java.io.FileWriter("C:\\temp\\" + fname))
//	for (var m in obj.getClass().getMethods()) {
//		bw.write(m)
//		bw.newLine()
//	}

	bw.write(str)
	bw.newLine()	
	bw.close()
}]]></parameter>
                </Script>
                <Script name="Test it">
                    <ModTime>1733415839952</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script">fetchItems()</parameter>
                </Script>
                <Script name="SCHEMA class">
                    <InheritFrom>/Scripts/SCHEMA class</InheritFrom>
                    <ModTime>1733490151923</ModTime>
                    <parameter name="enabled">true</parameter>
                </Script>
                <Script name="Chat test">
                    <ModTime>1733498821875</ModTime>
                    <parameter name="script"><![CDATA[var RCLASS = eval(system.getScriptText("RESTIFY library class"));
var lib = new RCLASS();
i = 42;]]></parameter>
                </Script>
                <Script name="Test">
                    <ModTime>1733490727210</ModTime>
                    <parameter name="script"><![CDATA[initialized = false;
function initialize() {
	if (initialized) return;
	initialized = true;
	
	form.alert("Initializing");

	// Load various JS 'Classes'
	RESTIFY = eval(system.getScriptText("RESTIFY library class").replaceAll("\n", " "))
	ENDPOINTS = eval(system.getScriptText("ENDPOINTS class").replaceAll("\n", " "));
	SCHEMA = eval(system.getScriptText("SCHEMA class").replaceAll("\n", " "));
	CFG = function() {
		this.schema = null
	}
	
	fetchSchema();
}

function fetchItems() {
    var path = form.getControl("PathToObjects").getText();
    initialize()
    updateDropdown("Object",
        path,
        "Cannot fetch resource items")
}

// Update the dropdown with operations for the selected item
function fetchOperations() {
    var object = form.getControl("Object").getText();
    initialize()
    updateDropdown("Operation",
        [form.getControl("PathToObjects"),
            form.getControl("Object").getText()
        ],
        "Cannot fetch operations for a resource item")
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	
alertObject("ENDPOINTS", ENDPOINTS);	
alertObject("SCHEMA", SCHEMA);
alertObject("RESTIFY", RESTIFY);
alertObject("CFG", CFG);
	
    var schemaJSON = RESTIFY.loadFileToString("_Restify/itim_swagger.json");
    CFG.schema = new SCHEMA(schemaJSON, "JSON");	 
	return CFG.schema
}

// Parse returned endpoint URIs
function parseURI(uri) {
    var parts = system.splitString(uri.trim(), "/");
    var itm = {
        name: parts[0].trim(),
        uri: uri
    }; // Initialize this with name

    for (var i = 1; i < parts.length; i++) {
        part = parts[i].trim();
        if (part.startsWith("{") && part.endsWith("}")) { // Then this is the Lookup on uid uri
            itm.uid = part;
            if (i > 1) { // The id is at the end of the path
                itm.relInfo = parts[1]
            } else
            if (i + 1 >= parts.length) {
                itm.relInfo = parts[parts.length - 1]
            }
        }
    }

    task.logmsg(work.fromJSON(toJson(itm)));

    return itm
}

// Update dropdown based on REST call
function updateDropdown(controlName, path, errorMsg) {
    var combo = "";

    if (!(path instanceof Array)) path = [path];

    var itemPath = (form.getControl("PathToObjects").getText() || "").trim();

    try {
        if (!itemPath) throw "Item Path must be set";

        var schema = CFG.schema;

        if (!schema) throw "No schema returned!";

        combo.removeAll(); // Empty drop-down

        var subtree = schema[path[0]].getChildren(path);

        form.alert(toJson(subtree));
        for (var res in subtree) {
            //form.alert(res)
            combo.add(res)
        }

        combo.select(0);
        return;

        // ------------------ SHORTCIRCUIT	

        if (!jsObj.items) {
            combo.add(jsObj[propertyName])
        } else {
            arr = new java.util.ArrayList()
            for (i = 0; i < jsObj.items.length; i++) {
                p = jsObj.items[i]
                label = p["label"]
                if (typeof(label) == "undefined")
                    val = p[propertyName]
                else
                    val = label + " |<<" + p[propertyName] + ">>|"
                //			form.alert(">> provider: " + p.uri)
                arr.add(val)
            }

            arr = arr.toArray()
            java.util.Arrays.sort(arr)

            for (var a in arr) {
                combo.add(a)
            }
        }
    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        form.alert(msg);
        throw msg
    }

    combo.select(0)

}

function fetchParams() {
    var params = makeCall(form.getControl("dataset").getText() + "/parameters",
        "No Dataset parameters returned",
        "getParams")
    var formconfig = form.getFormConfig()
    var fs
    var p
    var fic

    // create dataset section
    if (formconfig.getSection("Dataset") == null) {
        throw "Connection form is missing the 'Dataset' section!"
        //		fs = new com.ibm.di.config.base.FormSectionImpl()
        //		fs.setName("Dataset")
        //		fs.setTitle("Provider Dataset")
        //		formconfig.addSection(fs)
    }

    // get fs as section handle
    fs = formconfig.getSection("Dataset");

    // remove all dataset section fields
    for (str in fs.getNames()) {
        formconfig.removeFormItem(str);
    }

    // remove all params from section dataset
    fs.getNames().removeAllElements();


    // create a new param_* field and add it to Dataset section

    for (var i = 0; i < params.items.length; i++) {
        if (params.items[i].hidden != "true") {
            p = params.items[i]
            fic = formconfig.newFormItem(p.id)
            fic.setLabel(p.label)
            fic.setSyntax(p.type)
            fic.setToolTip(p.description)
            fic.setRequired(p.required != "false")

            if (("!" + p["default"]) != "!undefined")
                fic.setDefaultValue(p["default"])
            else
                fic.setDefaultValue("")

            fs.getNames().add(fic.getShortName())
        }
    }

    form.resetForm();
    form.initialize();
}

function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("C:\\temp\\" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    </Folder>
    <Folder name="Connectors">
        
        <Connector name="IBMSecurityAccessManagerv2Connector">
            <InheritFrom>system:/Connectors/ibmdi.ISAMConnector</InheritFrom>
            <ModTime>1733081271323</ModTime>
            <ConnectorMode>AddOnly</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733081269024</ModTime>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733081269024</ModTime>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733081269024</ModTime>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733081269024</ModTime>
            </AttributeMap>
            <DeltaSettings/>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733081269024</ModTime>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733081269024</ModTime>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733081269024</ModTime>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733081269024</ModTime>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    <Connector name="CURIConnector">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1733313038049</ModTime>
            <ConnectorMode>Update</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="473" UUID="975c5043-1612-42b9-b703-89b979d1f592" created="Tue Jan 10 13:03:36 CET 2012" createdBy="Administrator" main="Form" modified="Mon Jan 07 15:48:55 CET 2013" modifiedBy="Administrator" version="7.1.1">
    <Form name="Form">
        <UserComment>&gt;false&lt;</UserComment>
        <ModTime>1357570134468</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>conditions</ListItem>
            <ListItem>baseURL</ListItem>
            <ListItem>provider</ListItem>
            <ListItem>user</ListItem>
            <ListItem>password</ListItem>
            <ListItem>dataset</ListItem>
            <ListItem>datasource</ListItem>
            <ListItem>start</ListItem>
            <ListItem>count</ListItem>
            <ListItem>jdbcSource</ListItem>
            <ListItem>jdbcDriver</ListItem>
            <ListItem>jdbcLogin</ListItem>
            <ListItem>jdbcPassword</ListItem>
            <ListItem>jdbcSchema</ListItem>
            <ListItem>jdbcTable</ListItem>
            <ListItem>jdbcExposeNullValues</ListItem>
            <ListItem>jdbcCommit</ListItem>
            <ListItem>jdbcSelect</ListItem>
            <ListItem>jdbcLookup</ListItem>
            <ListItem>jdbcInsert</ListItem>
            <ListItem>jdbcUpdate</ListItem>
            <ListItem>jdbcDelete</ListItem>
            <ListItem>jdbcSessionParameters</ListItem>
            <ListItem>jdbcProviderParams</ListItem>
            <ListItem>jdbcDateFormat</ListItem>
            <ListItem>jdbcPreparedStatement</ListItem>
            <ListItem>jdbcDisablePaddingInsert</ListItem>
            <ListItem>jdbcDisablePaddingUpdate</ListItem>
            <ListItem>jdbcDisablePaddingLookup</ListItem>
            <ListItem>connectorFlags</ListItem>
            <ListItem>debug</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Dataset</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="ConserveMemory">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Set a variable to conserve memory while iterating through a search view</parameter>
            <parameter name="label">Conserve Memory</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="FSYSINDX1">
            <ModTime>1327090502515</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description"/>
            <parameter name="label">File System ID1</parameter>
            <parameter name="syntax">int</parameter>
        </FormItem>
        <FormItem name="FSYSINDX2">
            <ModTime>1327090502515</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description"/>
            <parameter name="label">File System ID2</parameter>
            <parameter name="syntax">int</parameter>
        </FormItem>
        <FormItem name="FSYSMOUNT">
            <ModTime>1327090502515</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description"/>
            <parameter name="label">Mount Point</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="FSYSNAME">
            <ModTime>1327090502515</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description"/>
            <parameter name="label">File System Name</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ORIGINNODE">
            <ModTime>1327090602156</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description"/>
            <parameter name="label">Origin Node</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="Refresh">
            <ModTime>1327090448796</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description"/>
            <parameter name="label">Refresh Every</parameter>
            <parameter name="syntax">map</parameter>
        </FormItem>
        <FormItem name="SourceToken">
            <ModTime>1327090448796</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Managed System Name</parameter>
            <parameter name="label">Managed System Name</parameter>
            <parameter name="syntax">map</parameter>
        </FormItem>
        <FormItem name="Time">
            <ModTime>1327090448796</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Time filter</parameter>
            <parameter name="label">Time filter</parameter>
            <parameter name="syntax">isodatetime</parameter>
        </FormItem>
        <FormItem name="alwaysUseFormula">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Use formula search even if database is full-text indexed (only when View is not specified)</parameter>
            <parameter name="label">Always use Formula Search</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="automapADPassword">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Map userPassword to unicodePwd for ActiveDirectory password update. Note: Not needed for ADAM.</parameter>
            <parameter name="label">Auto Map AD Password</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="baseURL">
            <ModTime>1327087233718</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="description">for example: http://tip.ibm.com:15210/ibm/tivoli/rest</parameter>
            <parameter name="label">Provider URL</parameter>
            <parameter name="script">getProviders</parameter>
            <parameter name="scriptLabel">Get Providers</parameter>
        </FormItem>
        <FormItem name="browseParams">
            <parameter name="label">Get Dataset </parameter>
        </FormItem>
        <FormItem name="conditions">
            <ModTime>1326367397750</ModTime>
            <parameter name="description">Filter conditions to apply when returning the Dataset</parameter>
            <parameter name="label">Conditions</parameter>
        </FormItem>
        <FormItem name="connectorFlags">
            <ModTime>1327096251750</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">{ignoreFieldErrors}</parameter>
            <parameter name="description">Connector flags</parameter>
            <parameter name="label">Connector Flags</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="count">
            <ModTime>1327093694640</ModTime>
            <parameter name="label">Count (for large sets)</parameter>
        </FormItem>
        <FormItem name="dataset">
            <ModTime>1327078585750</ModTime>
            <Values>
                <ListItem>* use the Get Datasets button *</ListItem>
            </Values>
            <parameter name="Required">false</parameter>
            <parameter name="label">Dataset</parameter>
            <parameter name="script">getParams</parameter>
            <parameter name="scriptLabel">Get parameters</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="datasource">
            <ModTime>1327087705140</ModTime>
            <Values>
                <ListItem>* use Get datasources button *</ListItem>
            </Values>
            <parameter name="label">Datasource</parameter>
            <parameter name="script">getDatasets</parameter>
            <parameter name="scriptLabel">Get Datasets</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="debug">
            <ModTime>1326357951046</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Check for additional log messages</parameter>
            <parameter name="label">Detailed Log</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dominoHost">
            <ModTime>1326358029062</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Domino server TCP/IP address or hostname. You can also specify the IOR:&lt;xxx= string to circumvent automatic discovery of this via HTTP.</parameter>
            <parameter name="label">Domino Server IP Address</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="dominoLogin">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Internet username</parameter>
            <parameter name="label">Username</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="dominoPassword">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Internet password</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="dominoSessionType">
            <ModTime>1326358029062</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">IIOP</parameter>
            <parameter name="description">The type of session to use</parameter>
            <parameter name="label">Session Type</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="httpPort">
            <ModTime>1326358029062</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">80</parameter>
            <parameter name="description">The port on which the Domino HTTP task is running</parameter>
            <parameter name="label">HTTP port</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="iiopSSL">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Enables encrypted communications with the Domino server</parameter>
            <parameter name="label">Use SSL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="jdbcCommit">
            <ModTime>1326275944250</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">After every database operation</parameter>
            <parameter name="description">Controls when database transactions are commited. Manual means user must call commit()</parameter>
            <parameter name="label">Commit</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcDateFormat">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Default date format when converting strings to dates</parameter>
            <parameter name="label">Date Format</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcDelete">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">SQL Delete statement</parameter>
            <parameter name="label">SQL Delete</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcDisablePaddingInsert">
            <ModTime>1326275944265</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Disables padding for the insert operation in the Add only and Delta modes.</parameter>
            <parameter name="label">Disable padding for Insert</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="jdbcDisablePaddingLookup">
            <ModTime>1326275944265</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Disables padding for the lookup operation in the Update, Lookup, Delete and Delta modes.</parameter>
            <parameter name="label">Disable padding for Lookup</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="jdbcDisablePaddingUpdate">
            <ModTime>1326275944265</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Disables padding for the update operation in the Update and Delta modes.</parameter>
            <parameter name="label">Disable padding for Update</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="jdbcDriver">
            <ModTime>1326275944250</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">sun.jdbc.odbc.JdbcOdbcDriver</parameter>
            <parameter name="description">JDBC Driver Class</parameter>
            <parameter name="label">JDBC Driver</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcExposeNullValues">
            <ModTime>1326275944250</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">true</parameter>
            <parameter name="description">If the checkbox is enabled then null valued attributes return an empty value. If left unchecked then the defined null behavior is followed. The default null behavior will remove the attribute which receives null.</parameter>
            <parameter name="label">Return null values</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="jdbcInsert">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">SQL Insert statement</parameter>
            <parameter name="label">SQL Insert</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcLogin">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Login user</parameter>
            <parameter name="label">Username</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcLookup">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">SQL Select for lookups</parameter>
            <parameter name="label">SQL Lookup</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcPassword">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">undefined</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcPreparedStatement">
            <ModTime>1326275944250</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">true</parameter>
            <parameter name="description">Try to precompile SQL Statements, fall back to normal SQL</parameter>
            <parameter name="label">Use Prepared Statement</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="jdbcProviderParams">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Additional JDBC provider parameters (name:value one for each line)</parameter>
            <parameter name="label">Extra Provider Parameters</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcSchema">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">undefined</parameter>
            <parameter name="label">Schema</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcSelect">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">SQL Select for Iterator mode (also used as statement stub (without "WHERE" keyword) for Link Criteria)</parameter>
            <parameter name="label">SQL Select</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcSessionParameters">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Alter session statements</parameter>
            <parameter name="label">Alter Session Statements</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcSource">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">JDBC URL</parameter>
            <parameter name="label">JDBC URL</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcTable">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Database table name</parameter>
            <parameter name="label">Table Name</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jdbcUpdate">
            <ModTime>1326287143015</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">SQL Update statement</parameter>
            <parameter name="label">SQL Update</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="jndiExtraProviderParams">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Additional JNDI provider parameters (name:value one for each line)</parameter>
            <parameter name="label">Extra Provider Parameters</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="ldapAddAttr">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Add attributes to entry instead of Replace</parameter>
            <parameter name="label">Add Attributes (instead of replace)</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="ldapAuthenticationMethod">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">Simple</parameter>
            <parameter name="description">Type of LDAP authentication</parameter>
            <parameter name="label">Authentication Method</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapBERTrace">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Trace LDAP BER packets to file (useful for debugging).</parameter>
            <parameter name="label">LDAP Trace File</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapBinaryAttributes">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">List of attributes that are treated as binary (one attribute per line)</parameter>
            <parameter name="label">Binary Attributes</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapPageSize">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">0</parameter>
            <parameter name="description"><![CDATA[When paging is used, the LDAP server will return a large data set as a sequence of smaller pieces called pages.
The page size specifies how many LDAP entries comprise a single page.
Set the page size to zero to disable paging.
Note that some LDAP servers do not support paging and will report an error if paging is enabled.]]]]><![CDATA[></parameter>
            <parameter name="label">Page Size</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapPassword">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Password associated with Login username</parameter>
            <parameter name="label">Login password</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapReferrals">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">follow</parameter>
            <parameter name="description">Specifies is referrals are followed, ignored or result in an error/exception (throw).</parameter>
            <parameter name="label">Referrals</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapReturnAttributes">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">List of attributes to return (one attribute per line). Empty  all</parameter>
            <parameter name="label">Return attributes</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapSearchBase">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">o=orgname</parameter>
            <parameter name="description"><![CDATA[Search base in directory. This parameter is only used in Iterator,Lookup,Update and Delete mode,
 but is visible in all modes to help with schema discovery.]]]]><![CDATA[></parameter>
            <parameter name="label">Search Base</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapSearchFilter">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">cn=*</parameter>
            <parameter name="description"><![CDATA[Search filter used when iterating the directory. This parameter is only used in Iterator mode,
 but is visible in all modes to help with schema discovery.]]]]><![CDATA[></parameter>
            <parameter name="label">Search Filter</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapSearchScope">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">subtree</parameter>
            <parameter name="description"><![CDATA[* subtree
	search all levels from search base and below

* onelevel
	search only immediate children of search base

]]]]><![CDATA[></parameter>
            <parameter name="label">Search Scope</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapSizeLimit">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">0</parameter>
            <parameter name="description">Max number of entries to return during a search (0  All)</parameter>
            <parameter name="label">Size Limit</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapSortAttribute">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Sort search/selection on specific attribute</parameter>
            <parameter name="label">Sort Attribute</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapTimeLimit">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">0</parameter>
            <parameter name="description">Timeout in seconds (0  Forever)</parameter>
            <parameter name="label">Time Limit</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapUrl">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">ldap://localhost:389</parameter>
            <parameter name="description">The LDAP server host/port</parameter>
            <parameter name="label">LDAP URL</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapUseSSL">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Uses secure sockets layer for communication with LDAP server</parameter>
            <parameter name="label">Use SSL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="ldapUsername">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Distinguished name for login (leave blank for anonymous)</parameter>
            <parameter name="label">Login username</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="ldapVLVPageSize">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">0</parameter>
            <parameter name="description">Specify a page size for Virtual List View iteration</parameter>
            <parameter name="label">Virtual List View Page Size</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="notesDatabase">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">names.nsf</parameter>
            <parameter name="description">The database to open</parameter>
            <parameter name="label">Database</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="notesSearchView">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Database view</parameter>
            <parameter name="label">Database View</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="notesSelection">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">LotusFormula Selection criteria (Iterator mode only)</parameter>
            <parameter name="label">Document Selection</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="notesServer">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Domino server name. Leave blank to use session server</parameter>
            <parameter name="label">Domino Server Name</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="param_ldapUrl">
            <ModTime>1326203606589</ModTime>
            <parameter name="label">LDAP Url</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormItem name="password">
            <ModTime>1327078570968</ModTime>
            <parameter name="label">Password</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="provider">
            <ModTime>1327087691828</ModTime>
            <Values>
                <ListItem>* use the Get Providers button *</ListItem>
            </Values>
            <parameter name="Required">false</parameter>
            <parameter name="label">Provider</parameter>
            <parameter name="script">getDatasources</parameter>
            <parameter name="scriptLabel">Get Datasources</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="setOprAttributes">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Enabling this allows setting and modifying operational attributes in IBM Directory Server. </parameter>
            <parameter name="label">Set Operational Attributes</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="simulateRename">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">If the server does not support rename, simulate it with delete/add operations</parameter>
            <parameter name="label">Simulate rename</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="start">
            <ModTime>1327093671734</ModTime>
            <parameter name="label">Start index (for large sets)</parameter>
        </FormItem>
        <FormItem name="supportRichText">
            <ModTime>1326358029078</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default">false</parameter>
            <parameter name="description">Enables Domino RichTextItems to be mapped as such in the Entry. Otherwise they will be converted to plain text. WARNING: As RichTextItems are not serializable, enabling this option will cause an exception if an attribute is mapped to another Domino database or if IBM Tivoli Directory Integrator Server is used remotely. </parameter>
            <parameter name="label">Support RichText items</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="url">
            <ModTime>1327069084687</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="label">Provider URI</parameter>
            <parameter name="script">getDatasources</parameter>
            <parameter name="scriptLabel">Get Parameters</parameter>
        </FormItem>
        <FormItem name="user">
            <ModTime>1327078552703</ModTime>
            <parameter name="label">User id</parameter>
        </FormItem>
        <FormItem name="userComment">
            <ModTime>1326358048609</ModTime>
            <parameter name="Required">false</parameter>
            <parameter name="default"/>
            <parameter name="description">Your own comments go here</parameter>
            <parameter name="label">Comment</parameter>
            <parameter name="syntax">string</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>$GLOBAL.debug</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>keepGlobalState</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <parameter name="ConserveMemory">false</parameter>
        <FormSection name="Dataset">
            <ModTime>1326287358937</ModTime>
            <FormSectionNames>
                <ListItem>jdbcSource</ListItem>
                <ListItem>jdbcDriver</ListItem>
                <ListItem>jdbcLogin</ListItem>
                <ListItem>jdbcPassword</ListItem>
                <ListItem>jdbcSchema</ListItem>
                <ListItem>jdbcTable</ListItem>
                <ListItem>jdbcExposeNullValues</ListItem>
                <ListItem>jdbcCommit</ListItem>
                <ListItem>jdbcSelect</ListItem>
                <ListItem>jdbcLookup</ListItem>
                <ListItem>jdbcInsert</ListItem>
                <ListItem>jdbcUpdate</ListItem>
                <ListItem>jdbcDelete</ListItem>
                <ListItem>jdbcSessionParameters</ListItem>
                <ListItem>jdbcProviderParams</ListItem>
                <ListItem>jdbcDateFormat</ListItem>
                <ListItem>jdbcPreparedStatement</ListItem>
                <ListItem>jdbcDisablePaddingInsert</ListItem>
                <ListItem>jdbcDisablePaddingUpdate</ListItem>
                <ListItem>jdbcDisablePaddingLookup</ListItem>
                <ListItem>connectorFlags</ListItem>
                <ListItem>debug</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">true</parameter>
            <parameter name="title">Provider Dataset Parameters</parameter>
        </FormSection>
        <parameter name="FSYSINDX1"/>
        <parameter name="FSYSINDX2"/>
        <parameter name="FSYSMOUNT"/>
        <parameter name="FSYSNAME"/>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>baseURL</ListItem>
                <ListItem>user</ListItem>
                <ListItem>password</ListItem>
                <ListItem>provider</ListItem>
                <ListItem>datasource</ListItem>
                <ListItem>dataset</ListItem>
                <ListItem>conditions</ListItem>
                <ListItem>start</ListItem>
                <ListItem>count</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="ORIGINNODE"/>
        <parameter name="Refresh"/>
        <parameter name="SourceToken"/>
        <parameter name="Time"/>
        <parameter name="alwaysUseFormula">false</parameter>
        <parameter name="automapADPassword">false</parameter>
        <parameter name="baseURL">http://localhost:1098/ibm/tivoli/rest</parameter>
        <parameter name="connectorFlags">{ignoreFieldErrors}</parameter>
        <parameter name="dataset">/providers/TDI/datasources/ibmdi.JDBC/datasets/Default</parameter>
        <parameter name="datasource">/providers/TDI/datasources/ibmdi.JDBC</parameter>
        <parameter name="debug">undefined</parameter>
        <parameter name="dominoHost"/>
        <parameter name="dominoLogin"/>
        <parameter name="dominoPassword"/>
        <parameter name="dominoSessionType">IIOP</parameter>
        <parameter name="formevents"><![CDATA[// 20120329 0919
function write(fname, str) {
	var bw = new java.io.BufferedWriter(new java.io.FileWriter("C:\\temp\\" + fname))
//	for (var m in obj.getClass().getMethods()) {
//		bw.write(m)
//		bw.newLine()
//	}

	bw.write(str)
	bw.newLine()	
	bw.close()
}

function makeCall(useURI, errorMsg, callType) {
	var url
	var user
	var password
	var httpEntry
	var jsonStr
	var json
	var p
	var p2
	var embeddedURI
	var userAndPassword
	
	user = form.getControl("user").getText()
	password = form.getControl("password").getText()
	url = form.getControl("baseURL").getText()
	
	p = useURI.indexOf("|<<")
	p2 = useURI.indexOf(">>|")
	if (p > 0 && p2 > 0 && p2 > p) {
		embeddedURI = useURI.substring(p+3, p2)
		useURI = embeddedURI + useURI.substring(p2+3)
	}	

	if (useURI.startsWith("/providers//providers"))
		useURI = useURI.substring(11)
		
//	p = url.indexOf("//")
//	url = url.substring(0,p+2) + userAndPassword + url.substring(p+2)

//	form.alert("baseURL: " + url)
//	form.alert("useURI: " + useURI)
//	form.alert("both combined: " + url + useURI)

	http.setParam("url", url + useURI)
	http.setParam("username", user)
	http.setParam("password", password)
	http.initialize(null)
	httpEntry = system.newEntry();
	httpEntry["http.content-type"] = "application/json"
	httpEntry["http.method"] = "GET"
	httpEntry["http.accept"] = "application/json"

//	form.alert("@@@ making call to " + http.getParam("url") + " with: \n" + httpEntry.toString()) // @@@

	httpEntry = http.queryReply(httpEntry)
	
//form.alert(httpEntry)
	
	if (httpEntry == null) 
		throw "Communication error * " + errorMsg + " - url used: " url + useURI + " --> return http.body:\n" + jsonStr

	jsonStr = httpEntry.getString("http.bodyAsString")
	
//	write("makeCall " + callType + ".txt", "url: " + url // @@@@
//						+ "\nuser: " + user
//						+ "\npassword: " + password
//						+ "\npayload:\n" + httpEntry.toString())
//	form.alert("@@@ " + callType + "\n" + jsonStr)
	
	if (jsonStr == null)
		throw errorMsg + " (Nothing returned) - url used: " http.getParam("url") + " --> return http.body:\n" + jsonStr

//	eval("json=" + jsonStr)
	try {
		json = fromJson(jsonStr)
	} catch (ex) {
		throw errorMsg + " - Error parsing JSON received: " + ex + "   JSON: " + jsonStr
	}

	if (typeof(json) == "undefined" || !json || json == null)
		throw errorMsg + "(Could not parse) - url used: " http.getParam("url") + " --> return http.body:\n" + jsonStr

	return json
}

function updateDropdown(uri, controlName, propertyName, errorMsg) {
	var json
	var uri
	var combo = ""
	var i
	var p
	var val
	var label
	var arr
	
	json = makeCall(uri, errorMsg, controlName)

	if (!json)
		return
			
	form.getClass()
	combo = form.getControl(controlName)
	combo.removeAll()

	if (!json.items) {
		combo.add(json[propertyName])
	} else {
		arr = new java.util.ArrayList()
		for (i = 0; i < json.items.length; i++) {
			p = json.items[i]
			label = p["label"]
			if (typeof(label) == "undefined")
				val = p[propertyName]
			else
				val = label + " |<<" + p[propertyName] + ">>|"
//			form.alert(">> provider: " + p.uri)
			arr.add(val)
		}
		
		arr = arr.toArray()
		java.util.Arrays.sort(arr)

		for (var a in arr) {
			combo.add(a)
		}	
	}
	
	combo.select(0)
}

function getProviders() {
	updateDropdown("/providers", "provider", "uri", "No Providers returned")
}

function getDatasources() {
	updateDropdown(form.getControl("provider").getText() + "/datasources", 
					"datasource", "uri", "No Datasources returned")
}

function getDatasets() {
	updateDropdown(form.getControl("datasource").getText() + "/datasets", 
					"dataset", "uri", "No Datasets returned")
}


function getParams() {
	var params = makeCall(form.getControl("dataset").getText() + "/parameters", 
							"No Dataset parameters returned",
							"getParams")
	var formconfig = form.getFormConfig()
	var fs
	var p
	var fic
	
	// create dataset section
	if( formconfig.getSection("Dataset") == null ) {
		throw "Connection form is missing the 'Dataset' section!"
//		fs = new com.ibm.di.config.base.FormSectionImpl()
//		fs.setName("Dataset")
//		fs.setTitle("Provider Dataset")
//		formconfig.addSection(fs)
	}

	// get fs as section handle
	fs = formconfig.getSection("Dataset");

	// remove all dataset section fields
	for(str in fs.getNames()) {
		formconfig.removeFormItem(str);
	}

	// remove all params from section dataset
	fs.getNames().removeAllElements();

	
	// create a new param_* field and add it to Dataset section

	for (var i = 0; i < params.items.length; i++)  {
		if (params.items[i].hidden != "true") {
			p = params.items[i]
			fic = formconfig.newFormItem(p.id)
			fic.setLabel(p.label)
			fic.setSyntax(p.type)
			fic.setToolTip(p.description)
			fic.setRequired(p.required != "false")
			
			if ( ("!" + p["default"]) != "!undefined" )
				fic.setDefaultValue(p["default"])
			else
				fic.setDefaultValue("")
			
			fs.getNames().add(fic.getShortName())
		}
	}		
		
	form.resetForm();
	form.initialize();
}

	]]]]><![CDATA[></parameter>
        <parameter name="formscript"><![CDATA[if (typeof(system) == "undefined") {
	var c = java.lang.Class.forName("com.ibm.di.function.UserFunctions")
	system = new c
}	

http = system.getConnector("ibmdi.HTTPClient")
]]]]><![CDATA[></parameter>
        <parameter name="httpPort">80</parameter>
        <parameter name="iiopSSL">false</parameter>
        <parameter name="jdbcCommit">After every database operation</parameter>
        <parameter name="jdbcDateFormat"/>
        <parameter name="jdbcDelete"/>
        <parameter name="jdbcDisablePaddingInsert">false</parameter>
        <parameter name="jdbcDisablePaddingLookup">false</parameter>
        <parameter name="jdbcDisablePaddingUpdate">false</parameter>
        <parameter name="jdbcDriver">sun.jdbc.odbc.JdbcOdbcDriver</parameter>
        <parameter name="jdbcExposeNullValues">true</parameter>
        <parameter name="jdbcInsert"/>
        <parameter name="jdbcLogin"/>
        <parameter name="jdbcLookup"/>
        <parameter name="jdbcPassword"/>
        <parameter name="jdbcPreparedStatement">true</parameter>
        <parameter name="jdbcProviderParams"/>
        <parameter name="jdbcSchema"/>
        <parameter name="jdbcSelect"/>
        <parameter name="jdbcSessionParameters"/>
        <parameter name="jdbcSource"/>
        <parameter name="jdbcTable"/>
        <parameter name="jdbcUpdate"/>
        <parameter name="jndiExtraProviderParams"/>
        <parameter name="ldapAddAttr">false</parameter>
        <parameter name="ldapAuthenticationMethod">Simple</parameter>
        <parameter name="ldapBERTrace"/>
        <parameter name="ldapBinaryAttributes"/>
        <parameter name="ldapPageSize">0</parameter>
        <parameter name="ldapPassword"/>
        <parameter name="ldapReferrals">follow</parameter>
        <parameter name="ldapReturnAttributes"/>
        <parameter name="ldapSearchBase">o=orgname</parameter>
        <parameter name="ldapSearchFilter">cn=*</parameter>
        <parameter name="ldapSearchScope">subtree</parameter>
        <parameter name="ldapSizeLimit">0</parameter>
        <parameter name="ldapSortAttribute"/>
        <parameter name="ldapTimeLimit">0</parameter>
        <parameter name="ldapUrl">ldap://localhost:389</parameter>
        <parameter name="ldapUseSSL">false</parameter>
        <parameter name="ldapUsername"/>
        <parameter name="ldapVLVPageSize">0</parameter>
        <parameter name="notesDatabase">names.nsf</parameter>
        <parameter name="notesSearchView"/>
        <parameter name="notesSelection"/>
        <parameter name="notesServer"/>
        <parameter name="password">tivoli4ibm</parameter>
        <parameter name="provider">/providers/TDI</parameter>
        <parameter name="script"/>
        <parameter name="setOprAttributes">false</parameter>
        <parameter name="simulateRename">false</parameter>
        <parameter name="supportRichText">false</parameter>
        <parameter name="title">CURI Connector</parameter>
        <parameter name="url">http://localhost:1098/ibm/tivoli/rest/providers/TDI/datasources/ibmdi.LDAP/datasets/Default</parameter>
        <parameter name="user">sysadmin</parameter>
        <parameter name="userComment">&gt;false&lt;</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="CATEGORY"/>
                <parameter name="CM"/>
                <parameter name="CN"/>
                <parameter name="CPUINDEX"/>
                <parameter name="DATACENTER"/>
                <parameter name="DM"/>
                <parameter name="HRDEVICEI0"/>
                <parameter name="LOCALPT"/>
                <parameter name="Limit"/>
                <parameter name="NWINAME"/>
                <parameter name="ORIGINNODE"/>
                <parameter name="PROTOCOL"/>
                <parameter name="Refresh"/>
                <parameter name="SourceToken"/>
                <parameter name="Time"/>
                <parameter name="automapADPassword">false</parameter>
                <parameter name="baseURL"/>
                <parameter name="conditions"/>
                <parameter name="connectorFlags">{ignoreFieldErrors}</parameter>
                <parameter name="count"/>
                <parameter name="dataset"/>
                <parameter name="datasource"/>
                <parameter name="debug"/>
                <parameter name="jdbcCommit">After every database operation</parameter>
                <parameter name="jdbcDateFormat"/>
                <parameter name="jdbcDelete"/>
                <parameter name="jdbcDisablePaddingInsert">false</parameter>
                <parameter name="jdbcDisablePaddingLookup">false</parameter>
                <parameter name="jdbcDisablePaddingUpdate">false</parameter>
                <parameter name="jdbcDriver">sun.jdbc.odbc.JdbcOdbcDriver</parameter>
                <parameter name="jdbcExposeNullValues">true</parameter>
                <parameter name="jdbcInsert"/>
                <parameter name="jdbcLogin"/>
                <parameter name="jdbcLookup"/>
                <parameter name="jdbcPassword"/>
                <parameter name="jdbcPreparedStatement">true</parameter>
                <parameter name="jdbcProviderParams"/>
                <parameter name="jdbcSchema"/>
                <parameter name="jdbcSelect"/>
                <parameter name="jdbcSessionParameters"/>
                <parameter name="jdbcSource">jdbc:odbc:people</parameter>
                <parameter name="jdbcTable">people</parameter>
                <parameter name="jdbcUpdate"/>
                <parameter name="jndiExtraProviderParams"/>
                <parameter name="ldapAddAttr">false</parameter>
                <parameter name="ldapAuthenticationMethod">Simple</parameter>
                <parameter name="ldapBERTrace"/>
                <parameter name="ldapBinaryAttributes"/>
                <parameter name="ldapPageSize">0</parameter>
                <parameter name="ldapPassword"/>
                <parameter name="ldapReferrals">follow</parameter>
                <parameter name="ldapReturnAttributes"/>
                <parameter name="ldapSearchBase">o=orgname</parameter>
                <parameter name="ldapSearchFilter">cn=*</parameter>
                <parameter name="ldapSearchScope">subtree</parameter>
                <parameter name="ldapSizeLimit">0</parameter>
                <parameter name="ldapSortAttribute"/>
                <parameter name="ldapTimeLimit">0</parameter>
                <parameter name="ldapUrl">ldap://localhost:389</parameter>
                <parameter name="ldapUseSSL">false</parameter>
                <parameter name="ldapUsername"/>
                <parameter name="ldapVLVPageSize">0</parameter>
                <parameter name="password"/>
                <parameter name="provider"/>
                <parameter name="script"><![CDATA[// 2012 11 01 22:07         - returning all data as sub-attributes of the main one (property = 'id')
// 2012 11 01 17:45 vrs 1.2 - fixed querySchema() to remove duplicate schema items
// 2012 09 14 17:41 - getNextEntry() adds fields from each entry (in addition to those returned as properties), like 'id'
// 2012 09 13 13:11 - fixed call to get hashmap.keySet().iterator()
// 2012 09 13 13:03 - fixed DSFields to DSField
// 2012 09 13 12:06 - added return of top-level fields (e.g. id, label) with dollar $ prefix
// 2012 09 13 11:54 - fixed 'use' should be 'user'
// 2012 09 12 13:30 - fixed hard-coded username/pwd in both Form Event and Connector scripts
// 2012 03 29 10:00 
// 2013 01 05 19:35 - added label handing for drop-downs in Form Event Script, as per Robert Uthe's request
//
vrs = "1.3" 	// 20130107 1528 - fixing problems with the label handling code
vrs = "1.3.1"	// 20130108 2052 - Attribute returned with Entry as value, including all properties

main.logmsg("CURI Connector v." + vrs)


var baseURL = null
var datasetURI = null
var fullURL = null
var user = null
var password = null
var start = null
var count = null
var params = null
var conditions = null
var entries = null
var entryCnt = 0

// attributes for each Entry in the same dataset (Dataset fields - prefixed with $ to avoid overwriting properties)
var DSField = null

if (typeof(system) == "undefined") {
	var c = java.lang.Class.forName("com.ibm.di.function.UserFunctions")
	system = new c
}	

http = system.getConnector("ibmdi.HTTPClient")

function initialize() {
	var p
	var p2
	var embeddedURI
	
	baseURL = connector.getParam("baseURL")
	datasetURI = connector.getParam("dataset")
	
	p = datasetURI.indexOf("|<<")
	p2 = datasetURI.indexOf(">>|")
	if (p > 0 && p2 > 0 && p2 > p) {
		embeddedURI = datasetURI.substring(p+3, p2)
		datasetURI = embeddedURI + datasetURI.substring(p2+3)
	}	
	
	fullURL = baseURL + datasetURI
	user = connector.getParam("user")
	password = connector.getParam("password")
	start = connector.getParam("start")
	count = connector.getParam("count")
	entries = null

//	main.logmsg("\n\ninitialize() - \nurl: " + baseURL + "\ndataset uri: " + datasetURI + "\nfull url: " + fullURL)
	
	if (!baseURL || baseURL == null || baseURL.trim() == "")
		throw "Required parameter for the Provider Dataset URL not set."
	
	if (baseURL.endsWith("/"))
		baseURL = baseURL.substring(0,baseURL.length-1)
		
//	task.logmsg("initialize() - baseURL: " + baseURL)
	
	conditions = connector.getParam("conditions")
	params = getParams()
}

function terminate() {
	baseURL = null
	entries = null
}


function querySchema() {
	var url = fullURL + "/columns" + queryStringParams()
	var p
	var e
	var schema
	var json
	var attNames
	
//	task.logmsg("querySchema() url: " + url)
	main.logmsg("querySchema()")

	json = makeCall(url, "No columns returned from Dataset")
	
	schema = system.newEntry()
	for (var i = 0; i < json.items.length; i++)  {
		p = json.items[i]
		schema[p.id] = p.valueType
	}		
	
//	main.logmsg("Got entry:" + schema.toString())

	attNames = schema.getAttributeNames()
	for (var att in attNames)  {
		e = system.newEntry()
		
		e.name = att
		e.syntax = schema.getString(att)
		list.add(e);
		params.put(p.id, e)
	}
		
	result.setStatus (1);
}


function selectEntries() {
	var url = fullURL + "/items" + queryStringParams(start, count)
	var json
	
	main.logmsg("selectEntries()")
	
	json = makeCall(url, "No columns returned from Dataset")
//	json = fromJson(system.getScriptText("testJSON")) // @@@@@
	
	DSField = new java.util.HashMap()
	
	for (var o in json)
		if (typeof(json[o]) != "object")
			DSField.put(o, json[o])
	
	entries = json.items
	id = entries.id
	label = entries.label
	entryCnt = 0
}


function getNextEntry () {
	var p
	var i
	var itr
	var key
	var json

	main.logmsg("getNextEntry() - entryCnt: " + entryCnt + "   length: " + entries.length)
	
	if (entries == null || entryCnt >= entries.length) {
		result.setStatus (0);
		return;
	}

	json = entries[entryCnt]
	props = json.properties

	entryCnt++
		
	entry["$rowNumber"] = entryCnt
	entry["$totalRows"] = entries.length
	
	// now add fields from the top-level - the message itself
	itr = DSField.keySet().iterator()
	while (itr.hasNext()) {
		key = itr.next()
		entry["$" + key] = DSField.get(key)
	}	

	// add fields - apart from properties - for this item
	for (var o in json)
		if (typeof(json[o]) != "object")
			entry[o] = json[o]
	
	if (typeof(props) != "undefined" && props != null)
		for (i = 0; i < props.length; i++) {
			var attEntry = system.newEntry()
			for (var p in props[i]) 
				attEntry[p] = props[i][p]
			entry[props[i].id] = attEntry
//			entry[props[i].id] = props[i].value 						// v1.3.1 - replaced with previous 4 lines
//			for (var p in props[i]) 
//				if (p != "id" && p != "value" && p != "valueType") { 
//		   		   entry[props[i].id +"_" + p] = props[i][p]
//				} 
//			entry[props[i].id + "_json"] = toJson(props[i])
		}
	
	
	result.setStatus (1);
	return entry		
}

function getParams() {
	var url = fullURL + "/parameters"
	var json
	var p
	var e
	var params = new java.util.HashMap()
	
	json = makeCall(url, "No parameters returned from Dataset")

	for (var i = 0; i < json.items.length; i++)  {
		p = json.items[i]
		e = system.newEntry()
		e.id = p.id
		e.label = p.label
		e.type = p.type
		e.description = p.description
		e.required = p.required
		if ( ("!" + p["default"]) != "!undefined" ) 
			e["default"] = p["default"]
		else
			e["default"] = ""

		params.put(p.id, e)
	}		

	return params		
}

function queryStringParams(strt, cnt) {
	var qs = ""
	var itr = params.keySet().iterator()
	var e
	var pval
	
	itr = params.keySet().iterator()
	
	while (itr.hasNext()) {
		e = params.get(itr.next())
		pval = connector.getParam(e.id.getValue())
		if (pval && pval != null && pval.trim() != "")
			if (!qs)
				qs = "?param_" + e.id + "=" + pval
			else
				qs += "&param_" + e.id + "=" + pval
	}
	
	if (conditions && conditions != null && conditions.trim() != "")
		if (!qs)
			qs += "conditions=" + conditions
		else
			qs += "&conditions=" + conditions
			
	if (typeof(strt) != "undefined" && strt != "")
		qs += "&start=" + strt
	if (typeof(cnt) != "undefined" && cnt != "")
		qs += "&count=" + cnt
    
    qs += "&properties=all"
    
	if (qs.startsWith("&"))
		qs = "?" + qs.substring(1)
		
//main.logmsg("qs: " + qs)

	return qs
}

function makeCall(uri, errormsg) {
	var httpEntry
	var jsonStr
	var json

	http.setParam("url", uri)
	http.setParam("username", user)
	http.setParam("password", password)
	http.initialize(null)
	
	httpEntry = system.newEntry();
	httpEntry["http.content-type"] = "application/json"
	httpEntry["http.method"] = "GET"
	httpEntry["http.accept"] = "application/json"

	main.logmsg("uri: " + uri)

	httpEntry = http.queryReply(httpEntry)	

	jsonStr = httpEntry.getString("http.bodyAsString")
	// main.logmsg("json: " + jsonStr)
	
	if (jsonStr == null) {
		throw errormsg + " - HTTP return:\n" + httpEntry.toString()
	}	
	else {
		try {
			json = fromJson(jsonStr)
		} catch (ex) {
			throw errormsg + " - Error parsing JSON received: " + ex + "    JSON: " + jsonStr
		}	
//		eval("json=" + jsonStr)
	}	

	if (typeof(json) == "undefined" || json == null) {
		throw errormsg + " - HTTP return:\n" + httpEntry.toString()
	} else
	if (json.msgSeverity)
		throw json.msgText + "\nJSON returned:\n" + jsonStr
	
	return json
}
]]></parameter>
                <parameter name="setOprAttributes">false</parameter>
                <parameter name="simulateRename">false</parameter>
                <parameter name="start"/>
                <parameter name="url">http://localhost:1098/ibm/tivoli/rest/providers/TDI/datasources/ibmdi.JDBC/datasets/Default</parameter>
                <parameter name="urlinfo"/>
                <parameter name="user"/>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <AttributeMapItem>
                    <Name>*</Name>
                    <Type>simple</Type>
                    <Simple>*</Simple>
                </AttributeMapItem>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <UniqueAttribute/>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <SchemaItem>
                    <Name>$filteredRows</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>$identifier</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>$numRows</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>$rowNumber</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>$totalRows</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>AFFSYS</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>AFFSYS_displayValue</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>MGROUP</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>MGROUP_displayValue</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
        <Connector name="TestScriptConnector">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1733599348275</ModTime>
            <ConnectorMode>Iterator</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733599348275</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="449" UUID="addb9b0b-e0b0-408d-bc18-1e00ff1dbaa6" created="Sun Dec 01 21:11:43 CET 2024" createdBy="eddiehartman" main="Form" modified="Sat Dec 07 20:22:28 CET 2024" modifiedBy="eddiehartman" version="7.1.1">
    <Form name="Form">
        <ModTime>1733599308171</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>Operation</ListItem>
            <ListItem>PathToObjects</ListItem>
            <ListItem>Item</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="Item">
            <ModTime>1733595218600</ModTime>
            <parameter name="description">The resource item to operation on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Update</parameter>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Object">
            <ModTime>1733572441046</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Item to perform operations on</parameter>
            <parameter name="label">	formdata.items = formdata.items || {};</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Operation">
            <ModTime>1733410717009</ModTime>
            <parameter name="description">Operation to apply to the selected Object</parameter>
            <parameter name="label">Operation</parameter>
            <parameter name="script">fetchOperations</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="PathToObjects">
            <ModTime>1733398344461</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The openAPIschema is hierarchical, so at what level in the tree do resource items appear. Separate tree branches by pipe symbol (|)</parameter>
            <parameter name="label">Path to Items</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
        </FormItem>
        <FormItem name="Show">
            <ModTime>1733312883681</ModTime>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dropdown"/>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>PathToObjects</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>$GLOBAL.debug</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>Item</ListItem>
                <ListItem>Operation</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="formevents"><![CDATA[//
//						GLOBAL VARIABLES
//
var __debug = false;
var __schema = null;
var __initialized = false;
var __lib = null;

//
//							FUNCTIONS
//

function alert(msg) {
	if (__debug) form.alert(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	eval(system.getScriptText("RESTIFY library class"));
	__lib = new RESTIFY();
	
	parseSchema();
}

// Return the openAPI schema - @TEST hardcoded for now
function parseSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
    var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
    
    //alert("Creating SCHEMA object");
	eval(system.getScriptText("SCHEMA class"));    
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with resource items
function fetchItems() {
	//alert("---> fetchItems");
    var path = form.getControl("PathToObjects").getText();

    updateDropdown("Item",
        [form.getControl("PathToObjects").getText()],
        "Cannot fetch operations for a resource item");
        
	__selectedItem = form.getControl("Item").getText()
}

// Update the dropdown with opera tions for the selected item
function fetchOperations() {
	alert("---> fetchOperations");
    var selectedItem = form.getControl("Item").getText();

    updateDropdown("Operation",
        [form.getControl("PathToObjects").getText(),
            selectedItem],
        "Cannot fetch operations for a resource item: " + selectedItem)

	__selectedObject = form.getControl("Item").getText()
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) throw "Item Path must be set";

        var subtree = __schema.getChildren(path);
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down
    			
        for (var res in subtree) {
            //alert("   ..adding " + res);
            combo.add(res)
        }
        alert("drop-down updated!")
    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }

    combo.select(0)
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"/>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="Item">/people/{personId}</parameter>
                <parameter name="Object"/>
                <parameter name="Operation">put</parameter>
                <parameter name="PathToObjects">paths</parameter>
                <parameter name="includeFiles"/>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings/>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    
    
    
    
        
        <Connector name="TestScriptConnector 20241206 1629">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1733498973705</ModTime>
            <ConnectorMode>Iterator</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733498973705</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="345" UUID="addb9b0b-e0b0-408d-bc18-1e00ff1dbaa6" created="Sun Dec 01 21:11:43 CET 2024" createdBy="eddiehartman" main="Form" modified="Fri Dec 06 16:29:33 CET 2024" modifiedBy="eddiehartman" version="7.1.1">
    <Form name="Form">
        <ModTime>1733498971119</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>Object</ListItem>
            <ListItem>Operation</ListItem>
            <ListItem>PathToObjects</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="Object">
            <ModTime>1733498971119</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Item to perform operations on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Update</parameter>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Operation">
            <ModTime>1733410717009</ModTime>
            <parameter name="description">Operation to apply to the selected Object</parameter>
            <parameter name="label">Operation</parameter>
            <parameter name="script">fetchOperations</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="PathToObjects">
            <ModTime>1733398344461</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The openAPIschema is hierarchical, so at what level in the tree do resource items appear. Separate tree branches by pipe symbol (|)</parameter>
            <parameter name="label">Path to Items</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
        </FormItem>
        <FormItem name="Show">
            <ModTime>1733312883681</ModTime>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dropdown"/>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>PathToObjects</ListItem>
                <ListItem>$GLOBAL.debug</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>Object</ListItem>
                <ListItem>Operation</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="formevents"><![CDATA[var debug = true;
var schema = null;
var initialized = false;
var lib = null;

//
//						FUNCTIONS
//

function alert(msg) {
	if (debug) form.alert(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (initialized) return;
	initialized = true;
	alert("Initializing...");
	eval(system.getScriptText("RESTIFY library class"));
	lib = new RESTIFY();
	eval(system.getScriptText("SCHEMA class"));
}
z
// Return the openAPI schema - @TEST hardcoded for now
function parseSchema() {
	alert("Fetching schema...")
	if (schema) return schema;

	alert("About to loadFileToString...");
    var schemaJSON = lib.loadFileToString("_Restify/itim_swagger.json");
    
    alert("Creating SCHEMA object");
    schema = new SCHEMA(schemaJSON, "JSON");
    
    alert("Got it!");
	return schema
}

// Update the dropdown with resource items
function fetchItems() {
	alert("---> fetchItems");
    var path = form.getControl("PathToObjects").getText();

    initialize();
    schema = parseSchema();

    updateDropdown("Object",
        path,
        "Cannot fetch resource items")
}

// Update the dropdown with operations for the selected item
function fetchOperations() {
	alert("---> fetchOperations");
    var object = form.getControl("Object").getText();

    updateDropdown("Operation",
        [form.getControl("PathToObjects"),
            form.getControl("Object").getText()
        ],
        "Cannot fetch operations for a resource item")
}

// Update the dropdown with operations for the selected item
function fetchSchema() {
	alert("---> fetchSchema");
	var object = form.getControl("Object").getText();
    var operation = form.getControl("Operation").getText();
}

// Parse returned endpoint URIs
function parseURI(uri) {
    var parts = system.splitString(uri.trim(), "/");
    var itm = {
        name: parts[0].trim(),
        uri: uri
    }; // Initialize this with name

    for (var i = 1; i < parts.length; i++) {
        part = parts[i].trim();
        if (part.startsWith("{") && part.endsWith("}")) { // Then this is the Lookup on uid uri
            itm.uid = part;
            if (i > 1) { // The id is at the end of the path
                itm.relInfo = parts[1]
            } else
            if (i + 1 >= parts.length) {
                itm.relInfo = parts[parts.length - 1]
            }
        }
    }

    task.logmsg(work.fromJSON(toJson(itm)));

    return itm
}

// Update dropdown based on REST call
function updateDropdown(controlName, path, errorMsg) {
    var combo = "";

    if (!(path instanceof Array)) path = [path];

    var itemPath = (form.getControl("PathToObjects").getText() || "").trim();

    try {
        if (!itemPath) throw "Item Path must be set";

        var schema = CFG.schema;

        if (!schema) throw "No schema returned!";

        combo.removeAll(); // Empty drop-down

        var subtree = schema[path[0]].getChildren(path);

        alert(toJson(subtree));
        for (var res in subtree) {
            //alert(res)
            combo.add(res)
        }

        combo.select(0);
        return;

        // ------------------ SHORTCIRCUIT	

        if (!jsObj.items) {
            combo.add(jsObj[propertyName])
        } else {
            arr = new java.util.ArrayList()
            for (i = 0; i < jsObj.items.length; i++) {
                p = jsObj.items[i]
                label = p["label"]
                if (typeof(label) == "undefined")
                    val = p[propertyName]
                else
                    val = label + " |<<" + p[propertyName] + ">>|"
                //			alert(">> provider: " + p.uri)
                arr.add(val)
            }

            arr = arr.toArray()
            java.util.Arrays.sort(arr)

            for (var a in arr) {
                combo.add(a)
            }
        }
    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        form.alert(msg);
        throw msg
    }

    combo.select(0)

}

function fetchParams() {
    var params = makeCall(form.getControl("dataset").getText() + "/parameters",
        "No Dataset parameters returned",
        "getParams")
    var formconfig = form.getFormConfig()
    var fs
    var p
    var fic

    // create dataset section
    if (formconfig.getSection("Dataset") == null) {
        throw "Connection form is missing the 'Dataset' section!"
        //		fs = new com.ibm.di.config.base.FormSectionImpl()
        //		fs.setName("Dataset")
        //		fs.setTitle("Provider Dataset")
        //		formconfig.addSection(fs)
    }

    // get fs as section handle
    fs = formconfig.getSection("Dataset");

    // remove all dataset section fields
    for (str in fs.getNames()) {
        formconfig.removeFormItem(str);
    }

    // remove all params from section dataset
    fs.getNames().removeAllElements();


    // create a new param_* field and add it to Dataset section

    for (var i = 0; i < params.items.length; i++) {
        if (params.items[i].hidden != "true") {
            p = params.items[i]
            fic = formconfig.newFormItem(p.id)
            fic.setLabel(p.label)
            fic.setSyntax(p.type)
            fic.setToolTip(p.description)
            fic.setRequired(p.required != "false")

            if (("!" + p["default"]) != "!undefined")
                fic.setDefaultValue(p["default"])
            else
                fic.setDefaultValue("")

            fs.getNames().add(fic.getShortName())
        }
    }

    form.resetForm();
    form.initialize();
}

function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("C:\\temp\\" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"/>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="Object"/>
                <parameter name="Operation"/>
                <parameter name="PathToObjects">paths</parameter>
                <parameter name="includeFiles"/>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings/>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    <Connector name="TestScriptConnector 20241207 1904">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1733594618821</ModTime>
            <ConnectorMode>Iterator</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733594618821</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="376" UUID="addb9b0b-e0b0-408d-bc18-1e00ff1dbaa6" created="Sun Dec 01 21:11:43 CET 2024" createdBy="eddiehartman" main="Form" modified="Sat Dec 07 19:03:38 CET 2024" modifiedBy="eddiehartman" version="7.1.1">
    <Form name="Form">
        <ModTime>1733594617924</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>Operation</ListItem>
            <ListItem>PathToObjects</ListItem>
            <ListItem>Item</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="Item">
            <ModTime>1733572449668</ModTime>
            <parameter name="description">The resource item to operation on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Update</parameter>
        </FormItem>
        <FormItem name="Object">
            <ModTime>1733572441046</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Item to perform operations on</parameter>
            <parameter name="label">	formdata.items = formdata.items || {};</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Operation">
            <ModTime>1733410717009</ModTime>
            <parameter name="description">Operation to apply to the selected Object</parameter>
            <parameter name="label">Operation</parameter>
            <parameter name="script">fetchOperations</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="PathToObjects">
            <ModTime>1733398344461</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The openAPIschema is hierarchical, so at what level in the tree do resource items appear. Separate tree branches by pipe symbol (|)</parameter>
            <parameter name="label">Path to Items</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
        </FormItem>
        <FormItem name="Show">
            <ModTime>1733312883681</ModTime>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dropdown"/>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>PathToObjects</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>$GLOBAL.debug</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>Item</ListItem>
                <ListItem>Operation</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="formevents"><![CDATA[//
//						GLOBAL VARIABLES
//
var __debug = true;
var __schema = null;
var __formdata = null;
var __initialized = false;
var __lib = null;

//
//						FUNCTIONS
//

function alert(msg) {
	if (__debug) form.alert(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	alert("Initializing...");
	eval(system.getScriptText("RESTIFY library class"));
	__lib = new RESTIFY();
}
z
// Return the openAPI schema - @TEST hardcoded for now
function parseSchema() {
	alert("Fetching schema...")
	if (__schema) return __schema;

	alert("About to loadFileToString...");
    var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
    
    alert("Creating SCHEMA object");
	eval(system.getScriptText("SCHEMA class"));    
    __schema = new SCHEMA(schemaJSON, "JSON");
	__formdata = parseFormData(__schema, "paths");
    
    alert("Got it!");
	return __schema
}

// Update the dropdown with resource items
function fetchItems() {
	alert("---> fetchItems");
    var path = form.getControl("PathToObjects").getText();

    initialize();
    parseSchema();

    updateDropdown("Item",
        [form.getControl("PathToObjects").getText],
        "Cannot fetch operations for a resource item")

}

// Update the dropdown with operations for the selected item
function fetchOperations() {
	alert("---> fetchOperations");
    var object = form.getControl("Object").getText();

    initialize();
    parseSchema();

    updateDropdown("Operation",
        [form.getControl("PathToObjects"),
            form.getControl("Object").getText()],
        "Cannot fetch operations for a resource item")
}

// Update the dropdown with operations for the selected item
function fetchSchema() {
	alert("---> fetchSchema");
	var object = form.getControl("Object").getText();
    var operation = form.getControl("Operation").getText();
}

// Parse returned endpoint URIs
function parseURI(uri) {
    var parts = system.splitString(uri.trim(), "/");
    var itm = {
        name: parts[0].trim(),
        uri: uri
    }; // Initialize this with name

    for (var i = 1; i < parts.length; i++) {
        part = parts[i].trim();
        if (part.startsWith("{") && part.endsWith("}")) { // Then this is the Lookup on uid uri
            itm.uid = part;
            if (i > 1) { // The id is at the end of the path
                itm.relInfo = parts[1]
            } else
            if (i + 1 >= parts.length) {
                itm.relInfo = parts[parts.length - 1]
            }
        }
    }

    task.logmsg(work.fromJSON(toJson(itm)));

    return itm
}

// Prepare the __formdata object to make updating dropdowns easier
function parseFormData(schema, initialPath) {
	__formdata = {};
	
	var items = schema.getChildren(initialPath);
	for (var item in items) {
		__formdata[item] = {};
		
		var operations = schema.getChildren([initialPath, item]);
		for (var operation in operations) {
			__formdata[item][operation] = {}
			
			var parameters = schema.getChildren([initialPath, item, operation])
			for (var parameter in parameters) {
				__formdata[item][operation][parameter] = {}
			}
		}
	}
	
	return __formdata
}


// Update dropdown based on REST call
function updateDropdown(controlName, path, errorMsg) {
    var combo = "";

    var itemPath = (form.getControl("PathToObjects").getText() || "").trim();
    var item = (form.getControl("Item").getText() || "").trim();
    var operation = (form.getControl("Operation").getText() || "").trim();

    try {
        if (!itemPath) throw "Item Path must be set";

        if (!__schema) throw "No schema returned!";

        combo.removeAll(); // Empty drop-down

        var subtree = __formdata;
        
        if (controlName == "Operation") {
        	subtree = _formdata[item]
        }
		else if (controlName == "Operation") {
        	subtree = _formdata[item][operation]
        }

        alert(toJson(subtree));
        for (var res in subtree) {
            //alert(res)
            combo.add(res)
        }

        combo.select(0);
        return;

        // ------------------ SHORTCIRCUIT	

        if (!jsObj.items) {
            combo.add(jsObj[propertyName])
        } else {
            arr = new java.util.ArrayList()
            for (i = 0; i < jsObj.items.length; i++) {
                p = jsObj.items[i]
                label = p["label"]
                if (typeof(label) == "undefined")
                    val = p[propertyName]
                else
                    val = label + " |<<" + p[propertyName] + ">>|"
                //			alert(">> provider: " + p.uri)
                arr.add(val)
            }

            arr = arr.toArray()
            java.util.Arrays.sort(arr)

            for (var a in arr) {
                combo.add(a)
            }
        }
    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        form.alert(msg);
        throw msg
    }

    combo.select(0)

}

function fetchParams() {
    var params = makeCall(form.getControl("dataset").getText() + "/parameters",
        "No Dataset parameters returned",
        "getParams")
    var formconfig = form.getFormConfig()
    var fs
    var p
    var fic

    // create dataset section
    if (formconfig.getSection("Dataset") == null) {
        throw "Connection form is missing the 'Dataset' section!"
        //		fs = new com.ibm.di.config.base.FormSectionImpl()
        //		fs.setName("Dataset")
        //		fs.setTitle("Provider Dataset")
        //		formconfig.addSection(fs)
    }

    // get fs as section handle
    fs = formconfig.getSection("Dataset");

    // remove all dataset section fields
    for (str in fs.getNames()) {
        formconfig.removeFormItem(str);
    }

    // remove all params from section dataset
    fs.getNames().removeAllElements();


    // create a new param_* field and add it to Dataset section

    for (var i = 0; i < params.items.length; i++) {
        if (params.items[i].hidden != "true") {
            p = params.items[i]
            fic = formconfig.newFormItem(p.id)
            fic.setLabel(p.label)
            fic.setSyntax(p.type)
            fic.setToolTip(p.description)
            fic.setRequired(p.required != "false")

            if (("!" + p["default"]) != "!undefined")
                fic.setDefaultValue(p["default"])
            else
                fic.setDefaultValue("")

            fs.getNames().add(fic.getShortName())
        }
    }

    form.resetForm();
    form.initialize();
}

function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("C:\\temp\\" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"/>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="Object"/>
                <parameter name="Operation"/>
                <parameter name="PathToObjects">paths</parameter>
                <parameter name="includeFiles"/>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings/>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
        <Connector name="TestScriptConnector 20241207 2011">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1733597450228</ModTime>
            <ConnectorMode>Iterator</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1733597450228</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="422" UUID="addb9b0b-e0b0-408d-bc18-1e00ff1dbaa6" created="Sun Dec 01 21:11:43 CET 2024" createdBy="eddiehartman" main="Form" modified="Sat Dec 07 19:50:50 CET 2024" modifiedBy="eddiehartman" version="7.1.1">
    <Form name="Form">
        <ModTime>1733597449784</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>Operation</ListItem>
            <ListItem>PathToObjects</ListItem>
            <ListItem>Item</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="Item">
            <ModTime>1733595218600</ModTime>
            <parameter name="description">The resource item to operation on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Update</parameter>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Object">
            <ModTime>1733572441046</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Item to perform operations on</parameter>
            <parameter name="label">	formdata.items = formdata.items || {};</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Operation">
            <ModTime>1733410717009</ModTime>
            <parameter name="description">Operation to apply to the selected Object</parameter>
            <parameter name="label">Operation</parameter>
            <parameter name="script">fetchOperations</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="PathToObjects">
            <ModTime>1733398344461</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The openAPIschema is hierarchical, so at what level in the tree do resource items appear. Separate tree branches by pipe symbol (|)</parameter>
            <parameter name="label">Path to Items</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
        </FormItem>
        <FormItem name="Show">
            <ModTime>1733312883681</ModTime>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dropdown"/>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>PathToObjects</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>$GLOBAL.debug</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>Item</ListItem>
                <ListItem>Operation</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="formevents"><![CDATA[//
//						GLOBAL VARIABLES
//
var __debug = true;
var __schema = null;
var __initialized = false;
var __lib = null;

//
//							FUNCTIONS
//

function alert(msg) {
	if (__debug) form.alert(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	eval(system.getScriptText("RESTIFY library class"));
	__lib = new RESTIFY();
	
	parseSchema();
}

// Return the openAPI schema - @TEST hardcoded for now
function parseSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
    var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
    
    //alert("Creating SCHEMA object");
	eval(system.getScriptText("SCHEMA class"));    
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    var toplvl = "";
    for (var tl in toplvl) toplvl = (toplvl ? ", " + tl : tl);
    alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with resource items
function fetchItems() {
	//alert("---> fetchItems");
    var path = form.getControl("PathToObjects").getText();

    updateDropdown("Item",
        [form.getControl("PathToObjects").getText()],
        "Cannot fetch operations for a resource item")

}

// Update the dropdown with operations for the selected item
function fetchOperations() {
	alert("---> fetchOperations");
    var item = form.getControl("Items").getText();

    updateDropdown("Operation",
        [form.getControl("PathToObjects").getText(),
            form.getControl("Item").getText()],
        "Cannot fetch operations for a resource item")
}

// Update the dropdown with operations for the selected item
function fetchSchema() {
	alert("---> fetchSchema");
	var item = form.getControl("Object").getText();
    var operation = form.getControl("Operation").getText();
}

// Update dropdown based on REST call
function updateDropdown(controlName, path, errorMsg) {
    var combo = form.getControl(controlName);
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) throw "Item Path must be set";

        var subtree = __schema.getChildren(path);
        
    	alert("subtree: \n"
    			+ toJson(subtree));
		combo.removeAll(); // Empty drop-down
    			
        for (var res in subtree) {
            //alert(res)
            combo.add(res)
        }
        alert("drop-down updated!")
    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }

    combo.select(0)

}

function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"/>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="Item">/entitlements/assignments/search</parameter>
                <parameter name="Object"/>
                <parameter name="Operation"/>
                <parameter name="PathToObjects">paths</parameter>
                <parameter name="includeFiles"/>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings/>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    </Folder>
    <Folder name="Parsers"/>
    <Folder name="Scripts">
        <Script name="exampleOpenAPISchemaJson">
            <ModTime>1731856312606</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v1"
    }
  ],
  "paths": {
    "/pets": {
      "get": {
        "summary": "List all pets",
        "operationId": "listPets",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An paged array of pets",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a pet",
        "operationId": "createPets",
        "tags": ["pets"],
        "responses": {
          "201": {
            "description": "Null response"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/pets/{petId}": {
      "get": {
        "summary": "Info for a specific pet",
        "operationId": "showPetById",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "The id of the pet to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Pet": {
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "Pets": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "Error": {
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}]]></parameter>
        </Script>
        <Script name="exampleOpenAPISchemaYAML">
            <ModTime>1731855960889</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        201:
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string]]></parameter>
        </Script>
    <Script name="exampleGoogleSchemaJSON">
            <ModTime>1732108819818</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[{
  "name": "gmail",
  "baseUrl": "https://gmail.googleapis.com/",
  "id": "gmail:v1",
  "revision": "20241111",
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://gmail.mtls.googleapis.com/",
  "title": "Gmail API",
  "rootUrl": "https://gmail.googleapis.com/",
  "version": "v1",
  "description": "The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.",
  "discoveryVersion": "v1",
  "canonicalName": "Gmail",
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://mail.google.com/": {
          "description": "Read, compose, send, and permanently delete all your email from Gmail"
        },
        "https://www.googleapis.com/auth/gmail.addons.current.action.compose": {
          "description": "Manage drafts and send emails when you interact with the add-on"
        },
        "https://www.googleapis.com/auth/gmail.addons.current.message.action": {
          "description": "View your email messages when you interact with the add-on"
        },
        "https://www.googleapis.com/auth/gmail.addons.current.message.metadata": {
          "description": "View your email message metadata when the add-on is running"
        },
        "https://www.googleapis.com/auth/gmail.addons.current.message.readonly": {
          "description": "View your email messages when the add-on is running"
        },
        "https://www.googleapis.com/auth/gmail.compose": {
          "description": "Manage drafts and send emails"
        },
        "https://www.googleapis.com/auth/gmail.insert": {
          "description": "Add emails into your Gmail mailbox"
        },
        "https://www.googleapis.com/auth/gmail.labels": {
          "description": "See and edit your email labels"
        },
        "https://www.googleapis.com/auth/gmail.metadata": {
          "description": "View your email message metadata such as labels and headers, but not the email body"
        },
        "https://www.googleapis.com/auth/gmail.modify": {
          "description": "Read, compose, and send emails from your Gmail account"
        },
        "https://www.googleapis.com/auth/gmail.readonly": {
          "description": "View your email messages and settings"
        },
        "https://www.googleapis.com/auth/gmail.send": {
          "description": "Send email on your behalf"
        },
        "https://www.googleapis.com/auth/gmail.settings.basic": {
          "description": "See, edit, create, or change your email settings and filters in Gmail"
        },
        "https://www.googleapis.com/auth/gmail.settings.sharing": {
          "description": "Manage your sensitive mail settings, including who can manage your mail"
        }
      }
    }
  },
  "ownerName": "Google",
  "resources": {
    "users": {
      "methods": {
        "getProfile": {
          "id": "gmail.users.getProfile",
          "path": "gmail/v1/users/{userId}/profile",
          "flatPath": "gmail/v1/users/{userId}/profile",
          "httpMethod": "GET",
          "parameters": {
            "userId": {
              "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
              "default": "me",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userId"
          ],
          "response": {
            "$ref": "Profile"
          },
          "scopes": [
            "https://mail.google.com/",
            "https://www.googleapis.com/auth/gmail.compose",
            "https://www.googleapis.com/auth/gmail.metadata",
            "https://www.googleapis.com/auth/gmail.modify",
            "https://www.googleapis.com/auth/gmail.readonly"
          ],
          "description": "Gets the current user's Gmail profile."
        },
        "watch": {
          "id": "gmail.users.watch",
          "path": "gmail/v1/users/{userId}/watch",
          "flatPath": "gmail/v1/users/{userId}/watch",
          "httpMethod": "POST",
          "parameters": {
            "userId": {
              "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
              "default": "me",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userId"
          ],
          "request": {
            "$ref": "WatchRequest"
          },
          "response": {
            "$ref": "WatchResponse"
          },
          "scopes": [
            "https://mail.google.com/",
            "https://www.googleapis.com/auth/gmail.metadata",
            "https://www.googleapis.com/auth/gmail.modify",
            "https://www.googleapis.com/auth/gmail.readonly"
          ],
          "description": "Set up or update a push notification watch on the given user mailbox."
        },
        "stop": {
          "id": "gmail.users.stop",
          "path": "gmail/v1/users/{userId}/stop",
          "flatPath": "gmail/v1/users/{userId}/stop",
          "httpMethod": "POST",
          "parameters": {
            "userId": {
              "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
              "default": "me",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userId"
          ],
          "scopes": [
            "https://mail.google.com/",
            "https://www.googleapis.com/auth/gmail.metadata",
            "https://www.googleapis.com/auth/gmail.modify",
            "https://www.googleapis.com/auth/gmail.readonly"
          ],
          "description": "Stop receiving push notifications for the given user mailbox."
        }
      },
      "resources": {
        "drafts": {
          "methods": {
            "delete": {
              "id": "gmail.users.drafts.delete",
              "path": "gmail/v1/users/{userId}/drafts/{id}",
              "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
              "httpMethod": "DELETE",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the draft to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Immediately and permanently deletes the specified draft. Does not simply trash it."
            },
            "create": {
              "id": "gmail.users.drafts.create",
              "path": "gmail/v1/users/{userId}/drafts",
              "flatPath": "gmail/v1/users/{userId}/drafts",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "36700160",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/drafts"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/drafts"
                  }
                }
              },
              "request": {
                "$ref": "Draft"
              },
              "response": {
                "$ref": "Draft"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Creates a new draft with the `DRAFT` label."
            },
            "get": {
              "id": "gmail.users.drafts.get",
              "path": "gmail/v1/users/{userId}/drafts/{id}",
              "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the draft to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "format": {
                  "description": "The format to return the draft in.",
                  "default": "full",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Returns only email message ID and labels; does not return the email headers, body, or payload.",
                    "Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns the full email message data with body content in the `raw` field as a base64url encoded string; the `payload` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns only email message ID, labels, and email headers."
                  ],
                  "enum": [
                    "minimal",
                    "full",
                    "raw",
                    "metadata"
                  ]
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Draft"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Gets the specified draft."
            },
            "list": {
              "id": "gmail.users.drafts.list",
              "path": "gmail/v1/users/{userId}/drafts",
              "flatPath": "gmail/v1/users/{userId}/drafts",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500.",
                  "default": "100",
                  "location": "query",
                  "type": "integer",
                  "format": "uint32"
                },
                "pageToken": {
                  "description": "Page token to retrieve a specific page of results in the list.",
                  "location": "query",
                  "type": "string"
                },
                "q": {
                  "description": "Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.",
                  "location": "query",
                  "type": "string"
                },
                "includeSpamTrash": {
                  "description": "Include drafts from `SPAM` and `TRASH` in the results.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListDraftsResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists the drafts in the user's mailbox."
            },
            "send": {
              "id": "gmail.users.drafts.send",
              "path": "gmail/v1/users/{userId}/drafts/send",
              "flatPath": "gmail/v1/users/{userId}/drafts/send",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "36700160",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/drafts/send"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/drafts/send"
                  }
                }
              },
              "request": {
                "$ref": "Draft"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers."
            },
            "update": {
              "id": "gmail.users.drafts.update",
              "path": "gmail/v1/users/{userId}/drafts/{id}",
              "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the draft to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "36700160",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/drafts/{id}"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/drafts/{id}"
                  }
                }
              },
              "request": {
                "$ref": "Draft"
              },
              "response": {
                "$ref": "Draft"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Replaces a draft's content."
            }
          }
        },
        "history": {
          "methods": {
            "list": {
              "id": "gmail.users.history.list",
              "path": "gmail/v1/users/{userId}/history",
              "flatPath": "gmail/v1/users/{userId}/history",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500.",
                  "default": "100",
                  "location": "query",
                  "type": "integer",
                  "format": "uint32"
                },
                "pageToken": {
                  "description": "Page token to retrieve a specific page of results in the list.",
                  "location": "query",
                  "type": "string"
                },
                "startHistoryId": {
                  "description": "Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request.",
                  "location": "query",
                  "type": "string",
                  "format": "uint64"
                },
                "labelId": {
                  "description": "Only return messages with a label matching the ID.",
                  "location": "query",
                  "type": "string"
                },
                "historyTypes": {
                  "description": "History types to be returned by the function",
                  "location": "query",
                  "repeated": true,
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "",
                    "",
                    ""
                  ],
                  "enum": [
                    "messageAdded",
                    "messageDeleted",
                    "labelAdded",
                    "labelRemoved"
                  ]
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListHistoryResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`)."
            }
          }
        },
        "messages": {
          "methods": {
            "trash": {
              "id": "gmail.users.messages.trash",
              "path": "gmail/v1/users/{userId}/messages/{id}/trash",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}/trash",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to Trash.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Moves the specified message to the trash."
            },
            "untrash": {
              "id": "gmail.users.messages.untrash",
              "path": "gmail/v1/users/{userId}/messages/{id}/untrash",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}/untrash",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to remove from Trash.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Removes the specified message from the trash."
            },
            "delete": {
              "id": "gmail.users.messages.delete",
              "path": "gmail/v1/users/{userId}/messages/{id}",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}",
              "httpMethod": "DELETE",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "scopes": [
                "https://mail.google.com/"
              ],
              "description": "Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead."
            },
            "batchDelete": {
              "id": "gmail.users.messages.batchDelete",
              "path": "gmail/v1/users/{userId}/messages/batchDelete",
              "flatPath": "gmail/v1/users/{userId}/messages/batchDelete",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "BatchDeleteMessagesRequest"
              },
              "scopes": [
                "https://mail.google.com/"
              ],
              "description": "Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all."
            },
            "import": {
              "id": "gmail.users.messages.import",
              "path": "gmail/v1/users/{userId}/messages/import",
              "flatPath": "gmail/v1/users/{userId}/messages/import",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "internalDateSource": {
                  "description": "Source for Gmail's internal date of the message.",
                  "default": "dateHeader",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Internal message date set to current time when received by Gmail.",
                    "Internal message time based on 'Date' header in email, when valid."
                  ],
                  "enum": [
                    "receivedTime",
                    "dateHeader"
                  ]
                },
                "neverMarkSpam": {
                  "description": "Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                },
                "processForCalendar": {
                  "description": "Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                },
                "deleted": {
                  "description": "Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "52428800",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/messages/import"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/messages/import"
                  }
                }
              },
              "request": {
                "$ref": "Message"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.insert",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message."
            },
            "insert": {
              "id": "gmail.users.messages.insert",
              "path": "gmail/v1/users/{userId}/messages",
              "flatPath": "gmail/v1/users/{userId}/messages",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "internalDateSource": {
                  "description": "Source for Gmail's internal date of the message.",
                  "default": "receivedTime",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Internal message date set to current time when received by Gmail.",
                    "Internal message time based on 'Date' header in email, when valid."
                  ],
                  "enum": [
                    "receivedTime",
                    "dateHeader"
                  ]
                },
                "deleted": {
                  "description": "Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "52428800",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/messages"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/messages"
                  }
                }
              },
              "request": {
                "$ref": "Message"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.insert",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message."
            },
            "get": {
              "id": "gmail.users.messages.get",
              "path": "gmail/v1/users/{userId}/messages/{id}",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is also contained in the result when a message is inserted (`messages.insert`) or imported (`messages.import`).",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "format": {
                  "description": "The format to return the message in.",
                  "default": "full",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Returns only email message ID and labels; does not return the email headers, body, or payload.",
                    "Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns the full email message data with body content in the `raw` field as a base64url encoded string; the `payload` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns only email message ID, labels, and email headers."
                  ],
                  "enum": [
                    "minimal",
                    "full",
                    "raw",
                    "metadata"
                  ]
                },
                "metadataHeaders": {
                  "description": "When given and format is `METADATA`, only include headers specified.",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.message.action",
                "https://www.googleapis.com/auth/gmail.addons.current.message.metadata",
                "https://www.googleapis.com/auth/gmail.addons.current.message.readonly",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Gets the specified message."
            },
            "send": {
              "id": "gmail.users.messages.send",
              "path": "gmail/v1/users/{userId}/messages/send",
              "flatPath": "gmail/v1/users/{userId}/messages/send",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "36700160",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/messages/send"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/messages/send"
                  }
                }
              },
              "request": {
                "$ref": "Message"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.send"
              ],
              "description": "Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending)."
            },
            "list": {
              "id": "gmail.users.messages.list",
              "path": "gmail/v1/users/{userId}/messages",
              "flatPath": "gmail/v1/users/{userId}/messages",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500.",
                  "default": "100",
                  "location": "query",
                  "type": "integer",
                  "format": "uint32"
                },
                "pageToken": {
                  "description": "Page token to retrieve a specific page of results in the list.",
                  "location": "query",
                  "type": "string"
                },
                "q": {
                  "description": "Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.",
                  "location": "query",
                  "type": "string"
                },
                "labelIds": {
                  "description": "Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see [Manage labels on messages and threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads).",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "includeSpamTrash": {
                  "description": "Include messages from `SPAM` and `TRASH` in the results.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListMessagesResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists the messages in the user's mailbox."
            },
            "modify": {
              "id": "gmail.users.messages.modify",
              "path": "gmail/v1/users/{userId}/messages/{id}/modify",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}/modify",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to modify.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "request": {
                "$ref": "ModifyMessageRequest"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Modifies the labels on the specified message."
            },
            "batchModify": {
              "id": "gmail.users.messages.batchModify",
              "path": "gmail/v1/users/{userId}/messages/batchModify",
              "flatPath": "gmail/v1/users/{userId}/messages/batchModify",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "BatchModifyMessagesRequest"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Modifies the labels on the specified messages."
            }
          },
          "resources": {
            "attachments": {
              "methods": {
                "get": {
                  "id": "gmail.users.messages.attachments.get",
                  "path": "gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}",
                  "flatPath": "gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "messageId": {
                      "description": "The ID of the message containing the attachment.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "The ID of the attachment.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "messageId",
                    "id"
                  ],
                  "response": {
                    "$ref": "MessagePartBody"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.addons.current.message.action",
                    "https://www.googleapis.com/auth/gmail.addons.current.message.readonly",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly"
                  ],
                  "description": "Gets the specified message attachment."
                }
              }
            }
          }
        },
        "labels": {
          "methods": {
            "create": {
              "id": "gmail.users.labels.create",
              "path": "gmail/v1/users/{userId}/labels",
              "flatPath": "gmail/v1/users/{userId}/labels",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "Label"
              },
              "response": {
                "$ref": "Label"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Creates a new label."
            },
            "delete": {
              "id": "gmail.users.labels.delete",
              "path": "gmail/v1/users/{userId}/labels/{id}",
              "flatPath": "gmail/v1/users/{userId}/labels/{id}",
              "httpMethod": "DELETE",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the label to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to."
            },
            "get": {
              "id": "gmail.users.labels.get",
              "path": "gmail/v1/users/{userId}/labels/{id}",
              "flatPath": "gmail/v1/users/{userId}/labels/{id}",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the label to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Label"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Gets the specified label."
            },
            "list": {
              "id": "gmail.users.labels.list",
              "path": "gmail/v1/users/{userId}/labels",
              "flatPath": "gmail/v1/users/{userId}/labels",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListLabelsResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists all labels in the user's mailbox."
            },
            "update": {
              "id": "gmail.users.labels.update",
              "path": "gmail/v1/users/{userId}/labels/{id}",
              "flatPath": "gmail/v1/users/{userId}/labels/{id}",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the label to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "request": {
                "$ref": "Label"
              },
              "response": {
                "$ref": "Label"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Updates the specified label."
            },
            "patch": {
              "id": "gmail.users.labels.patch",
              "path": "gmail/v1/users/{userId}/labels/{id}",
              "flatPath": "gmail/v1/users/{userId}/labels/{id}",
              "httpMethod": "PATCH",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the label to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "request": {
                "$ref": "Label"
              },
              "response": {
                "$ref": "Label"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Patch the specified label."
            }
          }
        },
        "threads": {
          "methods": {
            "trash": {
              "id": "gmail.users.threads.trash",
              "path": "gmail/v1/users/{userId}/threads/{id}/trash",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}/trash",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the thread to Trash.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Thread"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash."
            },
            "untrash": {
              "id": "gmail.users.threads.untrash",
              "path": "gmail/v1/users/{userId}/threads/{id}/untrash",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}/untrash",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the thread to remove from Trash.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Thread"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash."
            },
            "delete": {
              "id": "gmail.users.threads.delete",
              "path": "gmail/v1/users/{userId}/threads/{id}",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}",
              "httpMethod": "DELETE",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "ID of the Thread to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "scopes": [
                "https://mail.google.com/"
              ],
              "description": "Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer `threads.trash` instead."
            },
            "get": {
              "id": "gmail.users.threads.get",
              "path": "gmail/v1/users/{userId}/threads/{id}",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the thread to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "format": {
                  "description": "The format to return the messages in.",
                  "default": "full",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns only email message IDs, labels, and email headers.",
                    "Returns only email message IDs and labels; does not return the email headers, body, or payload."
                  ],
                  "enum": [
                    "full",
                    "metadata",
                    "minimal"
                  ]
                },
                "metadataHeaders": {
                  "description": "When given and format is METADATA, only include headers specified.",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Thread"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.message.action",
                "https://www.googleapis.com/auth/gmail.addons.current.message.metadata",
                "https://www.googleapis.com/auth/gmail.addons.current.message.readonly",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Gets the specified thread."
            },
            "list": {
              "id": "gmail.users.threads.list",
              "path": "gmail/v1/users/{userId}/threads",
              "flatPath": "gmail/v1/users/{userId}/threads",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500.",
                  "default": "100",
                  "location": "query",
                  "type": "integer",
                  "format": "uint32"
                },
                "pageToken": {
                  "description": "Page token to retrieve a specific page of results in the list.",
                  "location": "query",
                  "type": "string"
                },
                "q": {
                  "description": "Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.",
                  "location": "query",
                  "type": "string"
                },
                "labelIds": {
                  "description": "Only return threads with labels that match all of the specified label IDs.",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "includeSpamTrash": {
                  "description": "Include threads from `SPAM` and `TRASH` in the results.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListThreadsResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists the threads in the user's mailbox."
            },
            "modify": {
              "id": "gmail.users.threads.modify",
              "path": "gmail/v1/users/{userId}/threads/{id}/modify",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}/modify",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the thread to modify.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "request": {
                "$ref": "ModifyThreadRequest"
              },
              "response": {
                "$ref": "Thread"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Modifies the labels applied to the thread. This applies to all messages in the thread."
            }
          }
        },
        "settings": {
          "methods": {
            "getImap": {
              "id": "gmail.users.settings.getImap",
              "path": "gmail/v1/users/{userId}/settings/imap",
              "flatPath": "gmail/v1/users/{userId}/settings/imap",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ImapSettings"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets IMAP settings."
            },
            "updateImap": {
              "id": "gmail.users.settings.updateImap",
              "path": "gmail/v1/users/{userId}/settings/imap",
              "flatPath": "gmail/v1/users/{userId}/settings/imap",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "ImapSettings"
              },
              "response": {
                "$ref": "ImapSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Updates IMAP settings."
            },
            "getPop": {
              "id": "gmail.users.settings.getPop",
              "path": "gmail/v1/users/{userId}/settings/pop",
              "flatPath": "gmail/v1/users/{userId}/settings/pop",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "PopSettings"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets POP settings."
            },
            "updatePop": {
              "id": "gmail.users.settings.updatePop",
              "path": "gmail/v1/users/{userId}/settings/pop",
              "flatPath": "gmail/v1/users/{userId}/settings/pop",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "PopSettings"
              },
              "response": {
                "$ref": "PopSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Updates POP settings."
            },
            "getVacation": {
              "id": "gmail.users.settings.getVacation",
              "path": "gmail/v1/users/{userId}/settings/vacation",
              "flatPath": "gmail/v1/users/{userId}/settings/vacation",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "VacationSettings"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets vacation responder settings."
            },
            "updateVacation": {
              "id": "gmail.users.settings.updateVacation",
              "path": "gmail/v1/users/{userId}/settings/vacation",
              "flatPath": "gmail/v1/users/{userId}/settings/vacation",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "VacationSettings"
              },
              "response": {
                "$ref": "VacationSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Updates vacation responder settings."
            },
            "getLanguage": {
              "id": "gmail.users.settings.getLanguage",
              "path": "gmail/v1/users/{userId}/settings/language",
              "flatPath": "gmail/v1/users/{userId}/settings/language",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "LanguageSettings"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets language settings."
            },
            "updateLanguage": {
              "id": "gmail.users.settings.updateLanguage",
              "path": "gmail/v1/users/{userId}/settings/language",
              "flatPath": "gmail/v1/users/{userId}/settings/language",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "LanguageSettings"
              },
              "response": {
                "$ref": "LanguageSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead."
            },
            "getAutoForwarding": {
              "id": "gmail.users.settings.getAutoForwarding",
              "path": "gmail/v1/users/{userId}/settings/autoForwarding",
              "flatPath": "gmail/v1/users/{userId}/settings/autoForwarding",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "AutoForwarding"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets the auto-forwarding setting for the specified account."
            },
            "updateAutoForwarding": {
              "id": "gmail.users.settings.updateAutoForwarding",
              "path": "gmail/v1/users/{userId}/settings/autoForwarding",
              "flatPath": "gmail/v1/users/{userId}/settings/autoForwarding",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "AutoForwarding"
              },
              "response": {
                "$ref": "AutoForwarding"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.sharing"
              ],
              "description": "Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority."
            }
          },
          "resources": {
            "sendAs": {
              "methods": {
                "list": {
                  "id": "gmail.users.settings.sendAs.list",
                  "path": "gmail/v1/users/{userId}/settings/sendAs",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "response": {
                    "$ref": "ListSendAsResponse"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \"from\" aliases."
                },
                "get": {
                  "id": "gmail.users.settings.sendAs.get",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be retrieved.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "response": {
                    "$ref": "SendAs"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection."
                },
                "create": {
                  "id": "gmail.users.settings.sendAs.create",
                  "path": "gmail/v1/users/{userId}/settings/sendAs",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "request": {
                    "$ref": "SendAs"
                  },
                  "response": {
                    "$ref": "SendAs"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Creates a custom \"from\" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "update": {
                  "id": "gmail.users.settings.sendAs.update",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "httpMethod": "PUT",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be updated.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "request": {
                    "$ref": "SendAs"
                  },
                  "response": {
                    "$ref": "SendAs"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.basic",
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority."
                },
                "patch": {
                  "id": "gmail.users.settings.sendAs.patch",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be updated.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "request": {
                    "$ref": "SendAs"
                  },
                  "response": {
                    "$ref": "SendAs"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.basic",
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Patch the specified send-as alias."
                },
                "delete": {
                  "id": "gmail.users.settings.sendAs.delete",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be deleted.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "verify": {
                  "id": "gmail.users.settings.sendAs.verify",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be verified.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority."
                }
              },
              "resources": {
                "smimeInfo": {
                  "methods": {
                    "list": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.list",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail"
                      ],
                      "response": {
                        "$ref": "ListSmimeInfoResponse"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Lists S/MIME configs for the specified send-as alias."
                    },
                    "get": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.get",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "id": {
                          "description": "The immutable ID for the SmimeInfo.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail",
                        "id"
                      ],
                      "response": {
                        "$ref": "SmimeInfo"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Gets the specified S/MIME config for the specified send-as alias."
                    },
                    "insert": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.insert",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail"
                      ],
                      "request": {
                        "$ref": "SmimeInfo"
                      },
                      "response": {
                        "$ref": "SmimeInfo"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key."
                    },
                    "delete": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.delete",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "id": {
                          "description": "The immutable ID for the SmimeInfo.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail",
                        "id"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Deletes the specified S/MIME config for the specified send-as alias."
                    },
                    "setDefault": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.setDefault",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "id": {
                          "description": "The immutable ID for the SmimeInfo.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail",
                        "id"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Sets the default S/MIME config for the specified send-as alias."
                    }
                  }
                }
              }
            },
            "cse": {
              "resources": {
                "identities": {
                  "methods": {
                    "create": {
                      "id": "gmail.users.settings.cse.identities.create",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId"
                      ],
                      "request": {
                        "$ref": "CseIdentity"
                      },
                      "response": {
                        "$ref": "CseIdentity"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity."
                    },
                    "delete": {
                      "id": "gmail.users.settings.cse.identities.delete",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "cseEmailAddress": {
                          "description": "The primary email address associated with the client-side encryption identity configuration that's removed.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "cseEmailAddress"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration."
                    },
                    "get": {
                      "id": "gmail.users.settings.cse.identities.get",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "cseEmailAddress": {
                          "description": "The primary email address associated with the client-side encryption identity configuration that's retrieved.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "cseEmailAddress"
                      ],
                      "response": {
                        "$ref": "CseIdentity"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Retrieves a client-side encryption identity configuration."
                    },
                    "list": {
                      "id": "gmail.users.settings.cse.identities.list",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageToken": {
                          "description": "Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The number of identities to return. If not provided, the page size will default to 20 entries.",
                          "default": "20",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "userId"
                      ],
                      "response": {
                        "$ref": "ListCseIdentitiesResponse"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Lists the client-side encrypted identities for an authenticated user."
                    },
                    "patch": {
                      "id": "gmail.users.settings.cse.identities.patch",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "emailAddress": {
                          "description": "The email address of the client-side encryption identity to update.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "emailAddress"
                      ],
                      "request": {
                        "$ref": "CseIdentity"
                      },
                      "response": {
                        "$ref": "CseIdentity"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's [S/MIME certificate profiles](https://support.google.com/a/answer/7300887)."
                    }
                  }
                },
                "keypairs": {
                  "methods": {
                    "create": {
                      "id": "gmail.users.settings.cse.keypairs.create",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId"
                      ],
                      "request": {
                        "$ref": "CseKeyPair"
                      },
                      "response": {
                        "$ref": "CseKeyPair"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user."
                    },
                    "disable": {
                      "id": "gmail.users.settings.cse.keypairs.disable",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "keyPairId": {
                          "description": "The identifier of the key pair to turn off.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "keyPairId"
                      ],
                      "request": {
                        "$ref": "DisableCseKeyPairRequest"
                      },
                      "response": {
                        "$ref": "CseKeyPair"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method."
                    },
                    "enable": {
                      "id": "gmail.users.settings.cse.keypairs.enable",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "keyPairId": {
                          "description": "The identifier of the key pair to turn on.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "keyPairId"
                      ],
                      "request": {
                        "$ref": "EnableCseKeyPairRequest"
                      },
                      "response": {
                        "$ref": "CseKeyPair"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities."
                    },
                    "get": {
                      "id": "gmail.users.settings.cse.keypairs.get",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "keyPairId": {
                          "description": "The identifier of the key pair to retrieve.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "keyPairId"
                      ],
                      "response": {
                        "$ref": "CseKeyPair"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Retrieves an existing client-side encryption key pair."
                    },
                    "list": {
                      "id": "gmail.users.settings.cse.keypairs.list",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageToken": {
                          "description": "Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The number of key pairs to return. If not provided, the page size will default to 20 entries.",
                          "default": "20",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "userId"
                      ],
                      "response": {
                        "$ref": "ListCseKeyPairsResponse"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Lists client-side encryption key pairs for an authenticated user."
                    },
                    "obliterate": {
                      "id": "gmail.users.settings.cse.keypairs.obliterate",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "keyPairId": {
                          "description": "The identifier of the key pair to obliterate.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "keyPairId"
                      ],
                      "request": {
                        "$ref": "ObliterateCseKeyPairRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can't restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages."
                    }
                  }
                }
              }
            },
            "filters": {
              "methods": {
                "list": {
                  "id": "gmail.users.settings.filters.list",
                  "path": "gmail/v1/users/{userId}/settings/filters",
                  "flatPath": "gmail/v1/users/{userId}/settings/filters",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "response": {
                    "$ref": "ListFiltersResponse"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Lists the message filters of a Gmail user."
                },
                "get": {
                  "id": "gmail.users.settings.filters.get",
                  "path": "gmail/v1/users/{userId}/settings/filters/{id}",
                  "flatPath": "gmail/v1/users/{userId}/settings/filters/{id}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "The ID of the filter to be fetched.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "id"
                  ],
                  "response": {
                    "$ref": "Filter"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Gets a filter."
                },
                "create": {
                  "id": "gmail.users.settings.filters.create",
                  "path": "gmail/v1/users/{userId}/settings/filters",
                  "flatPath": "gmail/v1/users/{userId}/settings/filters",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "request": {
                    "$ref": "Filter"
                  },
                  "response": {
                    "$ref": "Filter"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Creates a filter. Note: you can only create a maximum of 1,000 filters."
                },
                "delete": {
                  "id": "gmail.users.settings.filters.delete",
                  "path": "gmail/v1/users/{userId}/settings/filters/{id}",
                  "flatPath": "gmail/v1/users/{userId}/settings/filters/{id}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "The ID of the filter to be deleted.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "id"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Immediately and permanently deletes the specified filter."
                }
              }
            },
            "forwardingAddresses": {
              "methods": {
                "list": {
                  "id": "gmail.users.settings.forwardingAddresses.list",
                  "path": "gmail/v1/users/{userId}/settings/forwardingAddresses",
                  "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "response": {
                    "$ref": "ListForwardingAddressesResponse"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Lists the forwarding addresses for the specified account."
                },
                "get": {
                  "id": "gmail.users.settings.forwardingAddresses.get",
                  "path": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "forwardingEmail": {
                      "description": "The forwarding address to be retrieved.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "forwardingEmail"
                  ],
                  "response": {
                    "$ref": "ForwardingAddress"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Gets the specified forwarding address."
                },
                "create": {
                  "id": "gmail.users.settings.forwardingAddresses.create",
                  "path": "gmail/v1/users/{userId}/settings/forwardingAddresses",
                  "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "request": {
                    "$ref": "ForwardingAddress"
                  },
                  "response": {
                    "$ref": "ForwardingAddress"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "delete": {
                  "id": "gmail.users.settings.forwardingAddresses.delete",
                  "path": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "forwardingEmail": {
                      "description": "The forwarding address to be deleted.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "forwardingEmail"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority."
                }
              }
            },
            "delegates": {
              "methods": {
                "list": {
                  "id": "gmail.users.settings.delegates.list",
                  "path": "gmail/v1/users/{userId}/settings/delegates",
                  "flatPath": "gmail/v1/users/{userId}/settings/delegates",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "response": {
                    "$ref": "ListDelegatesResponse"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "get": {
                  "id": "gmail.users.settings.delegates.get",
                  "path": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "delegateEmail": {
                      "description": "The email address of the user whose delegate relationship is to be retrieved.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "delegateEmail"
                  ],
                  "response": {
                    "$ref": "Delegate"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "create": {
                  "id": "gmail.users.settings.delegates.create",
                  "path": "gmail/v1/users/{userId}/settings/delegates",
                  "flatPath": "gmail/v1/users/{userId}/settings/delegates",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "request": {
                    "$ref": "Delegate"
                  },
                  "response": {
                    "$ref": "Delegate"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "delete": {
                  "id": "gmail.users.settings.delegates.delete",
                  "path": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "delegateEmail": {
                      "description": "The email address of the user to be removed as a delegate.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "delegateEmail"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority."
                }
              }
            }
          }
        }
      }
    }
  },
  "batchPath": "batch",
  "protocol": "rest",
  "basePath": "",
  "servicePath": "",
  "schemas": {
    "Draft": {
      "id": "Draft",
      "description": "A draft email in the user's mailbox.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The immutable ID of the draft.",
          "annotations": {
            "required": [
              "gmail.users.drafts.send"
            ]
          },
          "type": "string"
        },
        "message": {
          "description": "The message content of the draft.",
          "$ref": "Message"
        }
      }
    },
    "Message": {
      "id": "Message",
      "description": "An email message.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The immutable ID of the message.",
          "type": "string"
        },
        "threadId": {
          "description": "The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. ",
          "type": "string"
        },
        "labelIds": {
          "description": "List of IDs of labels applied to this message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snippet": {
          "description": "A short part of the message text.",
          "type": "string"
        },
        "historyId": {
          "description": "The ID of the last history record that modified this message.",
          "type": "string",
          "format": "uint64"
        },
        "internalDate": {
          "description": "The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.",
          "type": "string",
          "format": "int64"
        },
        "payload": {
          "description": "The parsed email structure in the message parts.",
          "$ref": "MessagePart"
        },
        "sizeEstimate": {
          "description": "Estimated size in bytes of the message.",
          "type": "integer",
          "format": "int32"
        },
        "raw": {
          "description": "The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.",
          "annotations": {
            "required": [
              "gmail.users.drafts.create",
              "gmail.users.drafts.update",
              "gmail.users.messages.insert",
              "gmail.users.messages.send"
            ]
          },
          "type": "string",
          "format": "byte"
        }
      }
    },
    "MessagePart": {
      "id": "MessagePart",
      "description": "A single MIME message part.",
      "type": "object",
      "properties": {
        "partId": {
          "description": "The immutable ID of the message part.",
          "type": "string"
        },
        "mimeType": {
          "description": "The MIME type of the message part.",
          "type": "string"
        },
        "filename": {
          "description": "The filename of the attachment. Only present if this message part represents an attachment.",
          "type": "string"
        },
        "headers": {
          "description": "List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.",
          "type": "array",
          "items": {
            "$ref": "MessagePartHeader"
          }
        },
        "body": {
          "description": "The message part body for this part, which may be empty for container MIME message parts.",
          "$ref": "MessagePartBody"
        },
        "parts": {
          "description": "The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.",
          "type": "array",
          "items": {
            "$ref": "MessagePart"
          }
        }
      }
    },
    "MessagePartHeader": {
      "id": "MessagePartHeader",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the header before the `:` separator. For example, `To`.",
          "type": "string"
        },
        "value": {
          "description": "The value of the header after the `:` separator. For example, `someuser@example.com`.",
          "type": "string"
        }
      }
    },
    "MessagePartBody": {
      "id": "MessagePartBody",
      "description": "The body of a single MIME message part.",
      "type": "object",
      "properties": {
        "attachmentId": {
          "description": "When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.",
          "type": "string"
        },
        "size": {
          "description": "Number of bytes for the message part data (encoding notwithstanding).",
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "description": "The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ListDraftsResponse": {
      "id": "ListDraftsResponse",
      "type": "object",
      "properties": {
        "drafts": {
          "description": "List of drafts. Note that the `Message` property in each `Draft` resource only contains an `id` and a `threadId`. The messages.get method can fetch additional message details.",
          "type": "array",
          "items": {
            "$ref": "Draft"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results in the list.",
          "type": "string"
        },
        "resultSizeEstimate": {
          "description": "Estimated total number of results.",
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "ListHistoryResponse": {
      "id": "ListHistoryResponse",
      "type": "object",
      "properties": {
        "history": {
          "description": "List of history records. Any `messages` contained in the response will typically only have `id` and `threadId` fields populated.",
          "type": "array",
          "items": {
            "$ref": "History"
          }
        },
        "nextPageToken": {
          "description": "Page token to retrieve the next page of results in the list.",
          "type": "string"
        },
        "historyId": {
          "description": "The ID of the mailbox's current history record.",
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "History": {
      "id": "History",
      "description": "A record of a change to the user's mailbox. Each history change may affect multiple messages in multiple ways.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The mailbox sequence ID.",
          "type": "string",
          "format": "uint64"
        },
        "messages": {
          "description": "List of messages changed in this history record. The fields for specific change types, such as `messagesAdded` may duplicate messages in this field. We recommend using the specific change-type fields instead of this.",
          "type": "array",
          "items": {
            "$ref": "Message"
          }
        },
        "messagesAdded": {
          "description": "Messages added to the mailbox in this history record.",
          "type": "array",
          "items": {
            "$ref": "HistoryMessageAdded"
          }
        },
        "messagesDeleted": {
          "description": "Messages deleted (not Trashed) from the mailbox in this history record.",
          "type": "array",
          "items": {
            "$ref": "HistoryMessageDeleted"
          }
        },
        "labelsAdded": {
          "description": "Labels added to messages in this history record.",
          "type": "array",
          "items": {
            "$ref": "HistoryLabelAdded"
          }
        },
        "labelsRemoved": {
          "description": "Labels removed from messages in this history record.",
          "type": "array",
          "items": {
            "$ref": "HistoryLabelRemoved"
          }
        }
      }
    },
    "HistoryMessageAdded": {
      "id": "HistoryMessageAdded",
      "type": "object",
      "properties": {
        "message": {
          "$ref": "Message"
        }
      }
    },
    "HistoryMessageDeleted": {
      "id": "HistoryMessageDeleted",
      "type": "object",
      "properties": {
        "message": {
          "$ref": "Message"
        }
      }
    },
    "HistoryLabelAdded": {
      "id": "HistoryLabelAdded",
      "type": "object",
      "properties": {
        "message": {
          "$ref": "Message"
        },
        "labelIds": {
          "description": "Label IDs added to the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "HistoryLabelRemoved": {
      "id": "HistoryLabelRemoved",
      "type": "object",
      "properties": {
        "message": {
          "$ref": "Message"
        },
        "labelIds": {
          "description": "Label IDs removed from the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BatchDeleteMessagesRequest": {
      "id": "BatchDeleteMessagesRequest",
      "type": "object",
      "properties": {
        "ids": {
          "description": "The IDs of the messages to delete.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListMessagesResponse": {
      "id": "ListMessagesResponse",
      "type": "object",
      "properties": {
        "messages": {
          "description": "List of messages. Note that each message resource contains only an `id` and a `threadId`. Additional message details can be fetched using the messages.get method.",
          "type": "array",
          "items": {
            "$ref": "Message"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results in the list.",
          "type": "string"
        },
        "resultSizeEstimate": {
          "description": "Estimated total number of results.",
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "ModifyMessageRequest": {
      "id": "ModifyMessageRequest",
      "type": "object",
      "properties": {
        "addLabelIds": {
          "description": "A list of IDs of labels to add to this message. You can add up to 100 labels with each update.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeLabelIds": {
          "description": "A list IDs of labels to remove from this message. You can remove up to 100 labels with each update.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BatchModifyMessagesRequest": {
      "id": "BatchModifyMessagesRequest",
      "type": "object",
      "properties": {
        "ids": {
          "description": "The IDs of the messages to modify. There is a limit of 1000 ids per request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addLabelIds": {
          "description": "A list of label IDs to add to messages.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeLabelIds": {
          "description": "A list of label IDs to remove from messages.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Label": {
      "id": "Label",
      "description": "Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The immutable ID of the label.",
          "annotations": {
            "required": [
              "gmail.users.labels.update"
            ]
          },
          "type": "string"
        },
        "name": {
          "description": "The display name of the label.",
          "annotations": {
            "required": [
              "gmail.users.labels.create",
              "gmail.users.labels.update"
            ]
          },
          "type": "string"
        },
        "messageListVisibility": {
          "description": "The visibility of messages with this label in the message list in the Gmail web interface.",
          "annotations": {
            "required": [
              "gmail.users.labels.create",
              "gmail.users.labels.update"
            ]
          },
          "type": "string",
          "enumDescriptions": [
            "Show the label in the message list.",
            "Do not show the label in the message list."
          ],
          "enum": [
            "show",
            "hide"
          ]
        },
        "labelListVisibility": {
          "description": "The visibility of the label in the label list in the Gmail web interface.",
          "annotations": {
            "required": [
              "gmail.users.labels.create",
              "gmail.users.labels.update"
            ]
          },
          "type": "string",
          "enumDescriptions": [
            "Show the label in the label list.",
            "Show the label if there are any unread messages with that label.",
            "Do not show the label in the label list."
          ],
          "enum": [
            "labelShow",
            "labelShowIfUnread",
            "labelHide"
          ]
        },
        "type": {
          "description": "The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.",
          "type": "string",
          "enumDescriptions": [
            "Labels created by Gmail.",
            "Custom labels created by the user or application."
          ],
          "enum": [
            "system",
            "user"
          ]
        },
        "messagesTotal": {
          "description": "The total number of messages with the label.",
          "type": "integer",
          "format": "int32"
        },
        "messagesUnread": {
          "description": "The number of unread messages with the label.",
          "type": "integer",
          "format": "int32"
        },
        "threadsTotal": {
          "description": "The total number of threads with the label.",
          "type": "integer",
          "format": "int32"
        },
        "threadsUnread": {
          "description": "The number of unread threads with the label.",
          "type": "integer",
          "format": "int32"
        },
        "color": {
          "description": "The color to assign to the label. Color is only available for labels that have their `type` set to `user`.",
          "$ref": "LabelColor"
        }
      }
    },
    "LabelColor": {
      "id": "LabelColor",
      "type": "object",
      "properties": {
        "textColor": {
          "description": "The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \\#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \\#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \\#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \\#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \\#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \\#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \\#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \\#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \\#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \\#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \\#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \\#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \\#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765",
          "type": "string"
        },
        "backgroundColor": {
          "description": "The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \\#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \\#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \\#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \\#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \\#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \\#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \\#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \\#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \\#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \\#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \\#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \\#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \\#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765",
          "type": "string"
        }
      }
    },
    "ListLabelsResponse": {
      "id": "ListLabelsResponse",
      "type": "object",
      "properties": {
        "labels": {
          "description": "List of labels. Note that each label resource only contains an `id`, `name`, `messageListVisibility`, `labelListVisibility`, and `type`. The labels.get method can fetch additional label details.",
          "type": "array",
          "items": {
            "$ref": "Label"
          }
        }
      }
    },
    "Profile": {
      "id": "Profile",
      "description": "Profile for a Gmail user.",
      "type": "object",
      "properties": {
        "emailAddress": {
          "description": "The user's email address.",
          "type": "string"
        },
        "messagesTotal": {
          "description": "The total number of messages in the mailbox.",
          "type": "integer",
          "format": "int32"
        },
        "threadsTotal": {
          "description": "The total number of threads in the mailbox.",
          "type": "integer",
          "format": "int32"
        },
        "historyId": {
          "description": "The ID of the mailbox's current history record.",
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "WatchRequest": {
      "id": "WatchRequest",
      "description": "Set up or update a new push notification watch on this user's mailbox.",
      "type": "object",
      "properties": {
        "labelIds": {
          "description": "List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labelFilterAction": {
          "description": "Filtering behavior of `labelIds list` specified. This field is deprecated because it caused incorrect behavior in some cases; use `label_filter_behavior` instead.",
          "deprecated": true,
          "type": "string",
          "enumDescriptions": [
            "Only get push notifications for message changes relating to labelIds specified.",
            "Get push notifications for all message changes except those relating to labelIds specified."
          ],
          "enum": [
            "include",
            "exclude"
          ]
        },
        "labelFilterBehavior": {
          "description": "Filtering behavior of `labelIds list` specified. This field replaces `label_filter_action`; if set, `label_filter_action` is ignored.",
          "type": "string",
          "enumDescriptions": [
            "Only get push notifications for message changes relating to labelIds specified.",
            "Get push notifications for all message changes except those relating to labelIds specified."
          ],
          "enum": [
            "include",
            "exclude"
          ]
        },
        "topicName": {
          "description": "A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format). Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request).",
          "type": "string"
        }
      }
    },
    "WatchResponse": {
      "id": "WatchResponse",
      "description": "Push notification watch response.",
      "type": "object",
      "properties": {
        "historyId": {
          "description": "The ID of the mailbox's current history record.",
          "type": "string",
          "format": "uint64"
        },
        "expiration": {
          "description": "When Gmail will stop sending notifications for mailbox updates (epoch millis). Call `watch` again before this time to renew the watch.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "Thread": {
      "id": "Thread",
      "description": "A collection of messages representing a conversation.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID of the thread.",
          "type": "string"
        },
        "snippet": {
          "description": "A short part of the message text.",
          "type": "string"
        },
        "historyId": {
          "description": "The ID of the last history record that modified this thread.",
          "type": "string",
          "format": "uint64"
        },
        "messages": {
          "description": "The list of messages in the thread.",
          "type": "array",
          "items": {
            "$ref": "Message"
          }
        }
      }
    },
    "ListThreadsResponse": {
      "id": "ListThreadsResponse",
      "type": "object",
      "properties": {
        "threads": {
          "description": "List of threads. Note that each thread resource does not contain a list of `messages`. The list of `messages` for a given thread can be fetched using the threads.get method.",
          "type": "array",
          "items": {
            "$ref": "Thread"
          }
        },
        "nextPageToken": {
          "description": "Page token to retrieve the next page of results in the list.",
          "type": "string"
        },
        "resultSizeEstimate": {
          "description": "Estimated total number of results.",
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "ModifyThreadRequest": {
      "id": "ModifyThreadRequest",
      "type": "object",
      "properties": {
        "addLabelIds": {
          "description": "A list of IDs of labels to add to this thread. You can add up to 100 labels with each update.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeLabelIds": {
          "description": "A list of IDs of labels to remove from this thread. You can remove up to 100 labels with each update.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListSendAsResponse": {
      "id": "ListSendAsResponse",
      "description": "Response for the ListSendAs method.",
      "type": "object",
      "properties": {
        "sendAs": {
          "description": "List of send-as aliases.",
          "type": "array",
          "items": {
            "$ref": "SendAs"
          }
        }
      }
    },
    "SendAs": {
      "id": "SendAs",
      "description": "Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom \"from\" address. Send-as aliases correspond to the \"Send Mail As\" feature in the web interface.",
      "type": "object",
      "properties": {
        "sendAsEmail": {
          "description": "The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create.",
          "type": "string"
        },
        "displayName": {
          "description": "A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.",
          "type": "string"
        },
        "replyToAddress": {
          "description": "An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header.",
          "type": "string"
        },
        "signature": {
          "description": "An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.",
          "type": "string"
        },
        "isPrimary": {
          "description": "Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.",
          "type": "boolean"
        },
        "isDefault": {
          "description": "Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.",
          "type": "boolean"
        },
        "treatAsAlias": {
          "description": "Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases.",
          "type": "boolean"
        },
        "smtpMsa": {
          "description": "An optional SMTP service that will be used as an outbound relay for mail sent using this alias. If this is empty, outbound mail will be sent directly from Gmail's servers to the destination SMTP service. This setting only applies to custom \"from\" aliases.",
          "$ref": "SmtpMsa"
        },
        "verificationStatus": {
          "description": "Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified verification status.",
            "The address is ready to use as a send-as alias.",
            "The address is awaiting verification by the owner."
          ],
          "enum": [
            "verificationStatusUnspecified",
            "accepted",
            "pending"
          ]
        }
      }
    },
    "SmtpMsa": {
      "id": "SmtpMsa",
      "description": "Configuration for communication with an SMTP service.",
      "type": "object",
      "properties": {
        "host": {
          "description": "The hostname of the SMTP service. Required.",
          "type": "string"
        },
        "port": {
          "description": "The port of the SMTP service. Required.",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "description": "The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.",
          "type": "string"
        },
        "password": {
          "description": "The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.",
          "type": "string"
        },
        "securityMode": {
          "description": "The protocol that will be used to secure communication with the SMTP service. Required.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified security mode.",
            "Communication with the remote SMTP service is unsecured. Requires port 25.",
            "Communication with the remote SMTP service is secured using SSL.",
            "Communication with the remote SMTP service is secured using STARTTLS."
          ],
          "enum": [
            "securityModeUnspecified",
            "none",
            "ssl",
            "starttls"
          ]
        }
      }
    },
    "ListSmimeInfoResponse": {
      "id": "ListSmimeInfoResponse",
      "type": "object",
      "properties": {
        "smimeInfo": {
          "description": "List of SmimeInfo.",
          "type": "array",
          "items": {
            "$ref": "SmimeInfo"
          }
        }
      }
    },
    "SmimeInfo": {
      "id": "SmimeInfo",
      "description": "An S/MIME email config.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The immutable ID for the SmimeInfo.",
          "type": "string"
        },
        "issuerCn": {
          "description": "The S/MIME certificate issuer's common name.",
          "type": "string"
        },
        "isDefault": {
          "description": "Whether this SmimeInfo is the default one for this user's send-as address.",
          "type": "boolean"
        },
        "expiration": {
          "description": "When the certificate expires (in milliseconds since epoch).",
          "type": "string",
          "format": "int64"
        },
        "pem": {
          "description": "PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).",
          "type": "string"
        },
        "pkcs12": {
          "description": "PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.",
          "type": "string",
          "format": "byte"
        },
        "encryptedKeyPassword": {
          "description": "Encrypted key password, when key is encrypted.",
          "type": "string"
        }
      }
    },
    "CseIdentity": {
      "id": "CseIdentity",
      "description": "The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.",
      "type": "object",
      "properties": {
        "emailAddress": {
          "description": "The email address for the sending identity. The email address must be the primary email address of the authenticated user.",
          "type": "string"
        },
        "primaryKeyPairId": {
          "description": "If a key pair is associated, the ID of the key pair, CseKeyPair.",
          "type": "string"
        },
        "signAndEncryptKeyPairs": {
          "description": "The configuration of a CSE identity that uses different key pairs for signing and encryption.",
          "$ref": "SignAndEncryptKeyPairs"
        }
      }
    },
    "SignAndEncryptKeyPairs": {
      "id": "SignAndEncryptKeyPairs",
      "description": "The configuration of a CSE identity that uses different key pairs for signing and encryption.",
      "type": "object",
      "properties": {
        "signingKeyPairId": {
          "description": "The ID of the CseKeyPair that signs outgoing mail.",
          "type": "string"
        },
        "encryptionKeyPairId": {
          "description": "The ID of the CseKeyPair that encrypts signed outgoing mail.",
          "type": "string"
        }
      }
    },
    "CseKeyPair": {
      "id": "CseKeyPair",
      "description": "A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.",
      "type": "object",
      "properties": {
        "keyPairId": {
          "description": "Output only. The immutable ID for the client-side encryption S/MIME key pair.",
          "readOnly": true,
          "type": "string"
        },
        "pkcs7": {
          "description": "Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.",
          "type": "string"
        },
        "pem": {
          "description": "Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.",
          "readOnly": true,
          "type": "string"
        },
        "subjectEmailAddresses": {
          "description": "Output only. The email address identities that are specified on the leaf certificate.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enablementState": {
          "description": "Output only. The current state of the key pair.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "The current state of the key pair is not set. The key pair is neither turned on nor turned off.",
            "The key pair is turned on. For any email messages that this key pair encrypts, Gmail decrypts the messages and signs any outgoing mail with the private key. To turn on a key pair, use the EnableCseKeyPair method.",
            "The key pair is turned off. Authenticated users cannot decrypt email messages nor sign outgoing messages. If a key pair is turned off for more than 30 days, you can permanently delete it. To turn off a key pair, use the DisableCseKeyPair method."
          ],
          "enum": [
            "stateUnspecified",
            "enabled",
            "disabled"
          ]
        },
        "disableTime": {
          "description": "Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "privateKeyMetadata": {
          "description": "Metadata for instances of this key pair's private key.",
          "type": "array",
          "items": {
            "$ref": "CsePrivateKeyMetadata"
          }
        }
      }
    },
    "CsePrivateKeyMetadata": {
      "id": "CsePrivateKeyMetadata",
      "description": "Metadata for a private key instance.",
      "type": "object",
      "properties": {
        "privateKeyMetadataId": {
          "description": "Output only. The immutable ID for the private key metadata instance.",
          "readOnly": true,
          "type": "string"
        },
        "kaclsKeyMetadata": {
          "description": "Metadata for a private key instance managed by an external key access control list service.",
          "$ref": "KaclsKeyMetadata"
        },
        "hardwareKeyMetadata": {
          "description": "Metadata for hardware keys.",
          "$ref": "HardwareKeyMetadata"
        }
      }
    },
    "KaclsKeyMetadata": {
      "id": "KaclsKeyMetadata",
      "description": "Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).",
      "type": "object",
      "properties": {
        "kaclsUri": {
          "description": "The URI of the key access control list service that manages the private key.",
          "type": "string"
        },
        "kaclsData": {
          "description": "Opaque data generated and used by the key access control list service. Maximum size: 8 KiB.",
          "type": "string"
        }
      }
    },
    "HardwareKeyMetadata": {
      "id": "HardwareKeyMetadata",
      "description": "Metadata for hardware keys.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description about the hardware key.",
          "type": "string"
        }
      }
    },
    "DisableCseKeyPairRequest": {
      "id": "DisableCseKeyPairRequest",
      "description": "Requests to turn off a client-side encryption key pair.",
      "type": "object",
      "properties": {}
    },
    "EnableCseKeyPairRequest": {
      "id": "EnableCseKeyPairRequest",
      "description": "Requests to turn on a client-side encryption key pair.",
      "type": "object",
      "properties": {}
    },
    "ListCseIdentitiesResponse": {
      "id": "ListCseIdentitiesResponse",
      "type": "object",
      "properties": {
        "cseIdentities": {
          "description": "One page of the list of CSE identities configured for the user.",
          "type": "array",
          "items": {
            "$ref": "CseIdentity"
          }
        },
        "nextPageToken": {
          "description": "Pagination token to be passed to a subsequent ListCseIdentities call in order to retrieve the next page of identities. If this value is not returned or is the empty string, then no further pages remain.",
          "type": "string"
        }
      }
    },
    "ListCseKeyPairsResponse": {
      "id": "ListCseKeyPairsResponse",
      "type": "object",
      "properties": {
        "cseKeyPairs": {
          "description": "One page of the list of CSE key pairs installed for the user.",
          "type": "array",
          "items": {
            "$ref": "CseKeyPair"
          }
        },
        "nextPageToken": {
          "description": "Pagination token to be passed to a subsequent ListCseKeyPairs call in order to retrieve the next page of key pairs. If this value is not returned, then no further pages remain.",
          "type": "string"
        }
      }
    },
    "ObliterateCseKeyPairRequest": {
      "id": "ObliterateCseKeyPairRequest",
      "description": "Request to obliterate a CSE key pair.",
      "type": "object",
      "properties": {}
    },
    "ListFiltersResponse": {
      "id": "ListFiltersResponse",
      "description": "Response for the ListFilters method.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "List of a user's filters.",
          "type": "array",
          "items": {
            "$ref": "Filter"
          }
        }
      }
    },
    "Filter": {
      "id": "Filter",
      "description": "Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The server assigned ID of the filter.",
          "type": "string"
        },
        "criteria": {
          "description": "Matching criteria for the filter.",
          "$ref": "FilterCriteria"
        },
        "action": {
          "description": "Action that the filter performs.",
          "$ref": "FilterAction"
        }
      }
    },
    "FilterCriteria": {
      "id": "FilterCriteria",
      "description": "Message matching criteria.",
      "type": "object",
      "properties": {
        "from": {
          "description": "The sender's display name or email address.",
          "type": "string"
        },
        "to": {
          "description": "The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive.",
          "type": "string"
        },
        "subject": {
          "description": "Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.",
          "type": "string"
        },
        "query": {
          "description": "Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.",
          "type": "string"
        },
        "negatedQuery": {
          "description": "Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.",
          "type": "string"
        },
        "hasAttachment": {
          "description": "Whether the message has any attachment.",
          "type": "boolean"
        },
        "excludeChats": {
          "description": "Whether the response should exclude chats.",
          "type": "boolean"
        },
        "size": {
          "description": "The size of the entire RFC822 message in bytes, including all headers and attachments.",
          "type": "integer",
          "format": "int32"
        },
        "sizeComparison": {
          "description": "How the message size in bytes should be in relation to the size field.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Find messages smaller than the given size.",
            "Find messages larger than the given size."
          ],
          "enum": [
            "unspecified",
            "smaller",
            "larger"
          ]
        }
      }
    },
    "FilterAction": {
      "id": "FilterAction",
      "description": "A set of actions to perform on a message.",
      "type": "object",
      "properties": {
        "addLabelIds": {
          "description": "List of labels to add to the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeLabelIds": {
          "description": "List of labels to remove from the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "forward": {
          "description": "Email address that the message should be forwarded to.",
          "type": "string"
        }
      }
    },
    "ImapSettings": {
      "id": "ImapSettings",
      "description": "IMAP settings for an account.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Whether IMAP is enabled for the account.",
          "type": "boolean"
        },
        "autoExpunge": {
          "description": "If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.",
          "type": "boolean"
        },
        "expungeBehavior": {
          "description": "The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified behavior.",
            "Archive messages marked as deleted.",
            "Move messages marked as deleted to the trash.",
            "Immediately and permanently delete messages marked as deleted. The expunged messages cannot be recovered."
          ],
          "enum": [
            "expungeBehaviorUnspecified",
            "archive",
            "trash",
            "deleteForever"
          ]
        },
        "maxFolderSize": {
          "description": "An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PopSettings": {
      "id": "PopSettings",
      "description": "POP settings for an account.",
      "type": "object",
      "properties": {
        "accessWindow": {
          "description": "The range of messages which are accessible via POP.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified range.",
            "Indicates that no messages are accessible via POP.",
            "Indicates that unfetched messages received after some past point in time are accessible via POP.",
            "Indicates that all unfetched messages are accessible via POP."
          ],
          "enum": [
            "accessWindowUnspecified",
            "disabled",
            "fromNowOn",
            "allMail"
          ]
        },
        "disposition": {
          "description": "The action that will be executed on a message after it has been fetched via POP.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified disposition.",
            "Leave the message in the `INBOX`.",
            "Archive the message.",
            "Move the message to the `TRASH`.",
            "Leave the message in the `INBOX` and mark it as read."
          ],
          "enum": [
            "dispositionUnspecified",
            "leaveInInbox",
            "archive",
            "trash",
            "markRead"
          ]
        }
      }
    },
    "VacationSettings": {
      "id": "VacationSettings",
      "description": "Vacation auto-reply settings for an account. These settings correspond to the \"Vacation responder\" feature in the web interface.",
      "type": "object",
      "properties": {
        "enableAutoReply": {
          "description": "Flag that controls whether Gmail automatically replies to messages.",
          "type": "boolean"
        },
        "responseSubject": {
          "description": "Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.",
          "type": "string"
        },
        "responseBodyPlainText": {
          "description": "Response body in plain text format. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.",
          "type": "string"
        },
        "responseBodyHtml": {
          "description": "Response body in HTML format. Gmail will sanitize the HTML before storing it. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.",
          "type": "string"
        },
        "restrictToContacts": {
          "description": "Flag that determines whether responses are sent to recipients who are not in the user's list of contacts.",
          "type": "boolean"
        },
        "restrictToDomain": {
          "description": "Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users.",
          "type": "boolean"
        },
        "startTime": {
          "description": "An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.",
          "type": "string",
          "format": "int64"
        },
        "endTime": {
          "description": "An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "LanguageSettings": {
      "id": "LanguageSettings",
      "description": "Language settings for an account. These settings correspond to the \"Language settings\" feature in the web interface.",
      "type": "object",
      "properties": {
        "displayLanguage": {
          "description": "The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example `en-GB`, `fr` or `ja` for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the \"Language\" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default).",
          "type": "string"
        }
      }
    },
    "ListForwardingAddressesResponse": {
      "id": "ListForwardingAddressesResponse",
      "description": "Response for the ListForwardingAddresses method.",
      "type": "object",
      "properties": {
        "forwardingAddresses": {
          "description": "List of addresses that may be used for forwarding.",
          "type": "array",
          "items": {
            "$ref": "ForwardingAddress"
          }
        }
      }
    },
    "ForwardingAddress": {
      "id": "ForwardingAddress",
      "description": "Settings for a forwarding address.",
      "type": "object",
      "properties": {
        "forwardingEmail": {
          "description": "An email address to which messages can be forwarded.",
          "type": "string"
        },
        "verificationStatus": {
          "description": "Indicates whether this address has been verified and is usable for forwarding. Read-only.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified verification status.",
            "The address is ready to use for forwarding.",
            "The address is awaiting verification by the owner."
          ],
          "enum": [
            "verificationStatusUnspecified",
            "accepted",
            "pending"
          ]
        }
      }
    },
    "AutoForwarding": {
      "id": "AutoForwarding",
      "description": "Auto-forwarding settings for an account.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Whether all incoming mail is automatically forwarded to another address.",
          "type": "boolean"
        },
        "emailAddress": {
          "description": "Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.",
          "type": "string"
        },
        "disposition": {
          "description": "The state that a message should be left in after it has been forwarded.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified disposition.",
            "Leave the message in the `INBOX`.",
            "Archive the message.",
            "Move the message to the `TRASH`.",
            "Leave the message in the `INBOX` and mark it as read."
          ],
          "enum": [
            "dispositionUnspecified",
            "leaveInInbox",
            "archive",
            "trash",
            "markRead"
          ]
        }
      }
    },
    "ListDelegatesResponse": {
      "id": "ListDelegatesResponse",
      "description": "Response for the ListDelegates method.",
      "type": "object",
      "properties": {
        "delegates": {
          "description": "List of the user's delegates (with any verification status). If an account doesn't have delegates, this field doesn't appear.",
          "type": "array",
          "items": {
            "$ref": "Delegate"
          }
        }
      }
    },
    "Delegate": {
      "id": "Delegate",
      "description": "Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See \"Set up mail delegation\" for more information about delegates.",
      "type": "object",
      "properties": {
        "delegateEmail": {
          "description": "The email address of the delegate.",
          "type": "string"
        },
        "verificationStatus": {
          "description": "Indicates whether this address has been verified and can act as a delegate for the account. Read-only.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified verification status.",
            "The address can act a delegate for the account.",
            "A verification request was mailed to the address, and the owner has not yet accepted it.",
            "A verification request was mailed to the address, and the owner rejected it.",
            "A verification request was mailed to the address, and it expired without verification."
          ],
          "enum": [
            "verificationStatusUnspecified",
            "accepted",
            "pending",
            "rejected",
            "expired"
          ]
        }
      }
    }
  },
  "documentationLink": "https://developers.google.com/gmail/api/",
  "kind": "discovery#restDescription",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  }
}]]></parameter>
        </Script>
    <Script name="_deleteMe">
            <ModTime>1733598779639</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[//
//						GLOBAL VARIABLES
//
var __debug = true;
var __schema = null;
var __initialized = false;
var __lib = null;

//
//							FUNCTIONS
//

function alert(msg) {
	if (__debug) form.alert(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	eval(system.getScriptText("RESTIFY library class"));
	__lib = new RESTIFY();
	
	parseSchema();
}

// Return the openAPI schema - @TEST hardcoded for now
function parseSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
    var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
    
    //alert("Creating SCHEMA object");
	eval(system.getScriptText("SCHEMA class"));    
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    var toplvl = "";
    for (var tl in toplvl) toplvl = (toplvl ? ", " + tl : tl);
    alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with resource items
function fetchItems() {
	//alert("---> fetchItems");
    var path = form.getControl("PathToObjects").getText();

    updateDropdown("Item",
        [form.getControl("PathToObjects").getText()],
        "Cannot fetch operations for a resource item")

}

// Update the dropdown with operations for the selected item
function fetchOperations() {
	alert("---> fetchOperations");
    var item = form.getControl("Items").getText();

    updateDropdown("Operation",
        [form.getControl("PathToObjects").getText(),
            form.getControl("Item").getText()],
        "Cannot fetch operations for a resource item")
}

// Update the dropdown with operations for the selected item
function fetchSchema() {
	alert("---> fetchSchema");
	var item = form.getControl("Object").getText();
    var operation = form.getControl("Operation").getText();
}

// Update dropdown based on REST call
function updateDropdown(controlName, path, errorMsg) {
    var combo = form.getControl(controlName);
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) throw "Item Path must be set";

        var subtree = __schema.getChildren(path);
        
    	alert("subtree: \n"
    			+ toJson(subtree));
		combo.removeAll(); // Empty drop-down
    			
        for (var res in subtree) {
            //alert(res)
            combo.add(res)
        }
        alert("drop-down updated!")
    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }

    combo.select(0)

}

function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
        </Script>
    
    <Script name="SCHEMA class">
            <ModTime>1733598483953</ModTime>
            <parameter name="enabled">true</parameter>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[function SCHEMA(schemaStr, format) {
	_WHERE = "SCHEMA class";	/* Global variable available for error reporting */
	this.name = "SCHEMA";
	this.schemaObj = {};
	
	/* Main init logic after method definitions

       The name says it all. Returns a JS Obj */
       
    this.parseOpenAPIschema = function(openApiSchema) {
        openApiSchema = openApiSchema.trim();
        var jsonString = "";

        /* Load Jackson libraries */
        var ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
        var objectMapper = new ObjectMapper();

        /* Check if YAML and if so, convert to Json */
        if ("YAML".equalsIgnoreCase(this.format)) {
            /* Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read */
            var Yaml = Packages.org.yaml.snakeyaml.Yaml;
            /* Create instances of Yaml and ObjectMapper */
            var yaml = new Yaml();
            /* Parse YAML into a Java Map */
            var map = yaml.load(openApiSchema);

            /* Convert Java Map to JSON string */
            jsonString = objectMapper.writeValueAsString(map)
        } else {
            jsonString = openApiSchema;
        }

        this.schemaObj = fromJson(jsonString);
        return this.schemaObj
    }

    /* Returns the child elements (JS Obj) of the specified path
       Root level if no argument or blank text passed */
    this.getChildren = function(path) { 
        var children = {};
        var parent;
        
        if (!path) {
        	path = []
        }
        else 
        if (!(path instanceof Array)) {
        	path = [path]	
        }
        
        parent = this.schemaObj[path[0]];
        for (var i = 1; i < path.length && parent; i++) {
        	parent = parent[path[i]];
        }

		if (parent) {
			for (var child in parent) {
				children[child] = parent[child]
			}
		}

        return children;
    }
    
    /* Main init logic */
    this.schemaStr = schemaStr;
    this.format = format || "YAML";
    this.schemaObj = this.parseOpenAPIschema(schemaStr)
}]]></parameter>
        </Script>
        <Script name="ENDPOINTS class">
            <ModTime>1733321570626</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// ENDPOINTS class to parse the schema object
var ENDPOINTS = function(args) {
	_WHERE = "ENDPOINTS class";	// Global variable available for error reporting
	this.name = "ENDPOINTS";

	this.schema = args.openAPIschema || {};
	this.api = args.api || null;
	this.hm = new java.util.HashMap();
	this.resources = {};
	this.paths = {};
	this.uriList = system.splitString("", "");	// Empty array
	this.config = {};

	
	// Main processing starts here
	if (!this.api || this.schema == {}) {
		throw "ENDPOINTS constructure requires the OpenAPI schema and instantiated API object"
	}
	
	// Get the various URIs and parse into parts to analyze
	for (var uri in this.schema) {
		var arr = this.hm.get(uri);
		if (arr == null) {
			arr = [];
			this.hm.put(uri.substring(1), arr)
		}
		arr.push(this.schema[uri])
	}

	// Set up a sorted array of the paths returned
	this.uriList = this.hm.keySet().toArray();
	java.util.Arrays.sort(this.uriList);
	
	// The next step is to create
	
	// Now to parse each to retrieve the first part of the base - the resource item type
	for (var uri in this.uriList) {
		var parts = system.splitString(uri, "/");
		var type = parts[0].trim();
		for (var i = 1; i < parts.length; i++) {
			var bit = parts[i].trim();
			// Check if it's an identifier
			if (bit.startWith("{") && bit.endsWith("}")) {
				
			}
		}
	}
	
	
	// check it
	var keys = hm.keySet().toArray();
	java.util.Arrays.sort(keys);
	for (var key in keys) {
		task.logmsg("-----> " + key)
	}
	
	return hm
}]]></parameter>
        </Script>
    <Script name="RESTIFY library class">
            <ModTime>1733415625214</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20241127 2024 Created

var RESTIFY = function() {
	this.loadFileToByteArray = function(filepath) {
		var file = new java.io.File(filepath);
		var fis = new java.io.FileInputStream(file);
		var bytes = java.util.Arrays.copyOf("".getBytes(), file.length());
		fis.read(bytes); //read file into bytes[]
		fis.close();
		return bytes;
	}
	
	this.loadFileToString = function(filepath) {
		var sb = new java.lang.StringBuilder();
		var file = system.openFileForInput(filepath);
		var line;
		while ((line = file.readLine()) != null) {
			sb.append(line + "\n");
		}
		return sb.toString();
	}
	
	this.loadFileToArray = function(filepath, delimiter) {
		delimiter = delimiter || "\n";
		
		var sb = new java.lang.StringBuilder();
		var file = system.openFileForInput(filepath);
		var line;
		while ((line = file.readLine()) != null) {
			sb.append(line + "\n");
		}
		var str = sb.toString();
		return system.splitString(str, delimiter)
	}
	
	this.getCertificate = function(url) {
		try {
			var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(url, 443);
		} finally {}
	}
}]]></parameter>
        </Script>
    </Folder>
    <JavaLibraries/>
    <JavaProperties/>
    <Folder name="Includes"/>
    <Folder name="Config">
        <LogConfig name="Logging"/>
        <InstanceProperties name="AutoStart">
            <AutoStart/>
        </InstanceProperties>
        <TombstonesConfig name="Tombstones"/>
        <SolutionInterface name="SolutionInterface">
            <ModTime>1731853025165</ModTime>
            <InstanceID>_Restify</InstanceID>
            <enabled>true</enabled>
        </SolutionInterface>
    </Folder>
    <Folder name="Functions"/>
    <Folder name="AttributeMaps"/>
    <Properties name="Properties">
        <Stores>
            <PropertyStore name="Solution-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">Solution-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="Global-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">Global-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="System-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">System-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="_Restify">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collection">@SUBSTITUTE{config.$directory}/_Restify.properties</parameter>
                    <parameter name="collectionType">_Restify</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="Java-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collection">@SUBSTITUTE{config.$directory}/_Restify.properties</parameter>
                    <parameter name="collectionType">Java-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
        </Stores>
    </Properties>
    <Folder name="Schedules"/>
    <Folder name="Sequences"/>
</MetamergeConfig>